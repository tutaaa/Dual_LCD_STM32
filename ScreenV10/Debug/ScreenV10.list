
ScreenV10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ebc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000934  0800405c  0800405c  0001405c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004990  08004990  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  08004990  08004990  00014990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004998  08004998  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004998  08004998  00014998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800499c  0800499c  0001499c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  080049a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  200000a8  08004a44  000200a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08004a44  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa03  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002038  00000000  00000000  0002fad7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e88  00000000  00000000  00031b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00016f79  00000000  00000000  00032998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000fc52  00000000  00000000  00049911  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0009068b  00000000  00000000  00059563  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000e9bee  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000db8  00000000  00000000  000e9c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004144  00000000  00000000  000ea9f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a8 	.word	0x200000a8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004044 	.word	0x08004044

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000ac 	.word	0x200000ac
 80001dc:	08004044 	.word	0x08004044

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <init>:
uint64_t micros();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void init() {
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
	ST7735_Init();
 800058a:	f000 fc23 	bl	8000dd4 <ST7735_Init>
	ST7735_FillScreen(ST7735_BLACK);
 800058e:	2000      	movs	r0, #0
 8000590:	f000 fde8 	bl	8001164 <ST7735_FillScreen>
	ST7735_FillScreen1(ST7735_BLACK);
 8000594:	2000      	movs	r0, #0
 8000596:	f000 fdf6 	bl	8001186 <ST7735_FillScreen1>
	const char ready[] = "Ready!\r\n";
 800059a:	4a08      	ldr	r2, [pc, #32]	; (80005bc <init+0x38>)
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	ca07      	ldmia	r2, {r0, r1, r2}
 80005a0:	c303      	stmia	r3!, {r0, r1}
 80005a2:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)ready, sizeof(ready)-1, HAL_MAX_DELAY);
 80005a4:	1d39      	adds	r1, r7, #4
 80005a6:	f04f 33ff 	mov.w	r3, #4294967295
 80005aa:	2208      	movs	r2, #8
 80005ac:	4804      	ldr	r0, [pc, #16]	; (80005c0 <init+0x3c>)
 80005ae:	f002 fd34 	bl	800301a <HAL_UART_Transmit>

}
 80005b2:	bf00      	nop
 80005b4:	3710      	adds	r7, #16
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	0800405c 	.word	0x0800405c
 80005c0:	20000164 	.word	0x20000164

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c8:	f000 ff94 	bl	80014f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005cc:	f000 f814 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d0:	f000 f8fe 	bl	80007d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005d4:	f000 f8d2 	bl	800077c <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80005d8:	f000 f876 	bl	80006c8 <MX_SPI2_Init>
  MX_TIM11_Init();
 80005dc:	f000 f8aa 	bl	8000734 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
	init();
 80005e0:	f7ff ffd0 	bl	8000584 <init>
	HAL_TIM_Base_Start_IT(&htim11);
 80005e4:	4803      	ldr	r0, [pc, #12]	; (80005f4 <main+0x30>)
 80005e6:	f002 fa75 	bl	8002ad4 <HAL_TIM_Base_Start_IT>
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		//loop();
		logic_demo();
 80005ea:	f000 fa79 	bl	8000ae0 <logic_demo>
		GUI_P1();
 80005ee:	f000 f987 	bl	8000900 <GUI_P1>
		logic_demo();
 80005f2:	e7fa      	b.n	80005ea <main+0x26>
 80005f4:	2000011c 	.word	0x2000011c

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b094      	sub	sp, #80	; 0x50
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0320 	add.w	r3, r7, #32
 8000602:	2230      	movs	r2, #48	; 0x30
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f003 f8a6 	bl	8003758 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800061c:	2300      	movs	r3, #0
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	4b27      	ldr	r3, [pc, #156]	; (80006c0 <SystemClock_Config+0xc8>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	4a26      	ldr	r2, [pc, #152]	; (80006c0 <SystemClock_Config+0xc8>)
 8000626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062a:	6413      	str	r3, [r2, #64]	; 0x40
 800062c:	4b24      	ldr	r3, [pc, #144]	; (80006c0 <SystemClock_Config+0xc8>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000638:	2300      	movs	r3, #0
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	4b21      	ldr	r3, [pc, #132]	; (80006c4 <SystemClock_Config+0xcc>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a20      	ldr	r2, [pc, #128]	; (80006c4 <SystemClock_Config+0xcc>)
 8000642:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000646:	6013      	str	r3, [r2, #0]
 8000648:	4b1e      	ldr	r3, [pc, #120]	; (80006c4 <SystemClock_Config+0xcc>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000654:	2302      	movs	r3, #2
 8000656:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000658:	2301      	movs	r3, #1
 800065a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800065c:	2310      	movs	r3, #16
 800065e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000660:	2302      	movs	r3, #2
 8000662:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000664:	2300      	movs	r3, #0
 8000666:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000668:	2308      	movs	r3, #8
 800066a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800066c:	2364      	movs	r3, #100	; 0x64
 800066e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000670:	2302      	movs	r3, #2
 8000672:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000674:	2304      	movs	r3, #4
 8000676:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000678:	f107 0320 	add.w	r3, r7, #32
 800067c:	4618      	mov	r0, r3
 800067e:	f001 fab1 	bl	8001be4 <HAL_RCC_OscConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000688:	f000 fa9e 	bl	8000bc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068c:	230f      	movs	r3, #15
 800068e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000690:	2302      	movs	r3, #2
 8000692:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000698:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006a2:	f107 030c 	add.w	r3, r7, #12
 80006a6:	2103      	movs	r1, #3
 80006a8:	4618      	mov	r0, r3
 80006aa:	f001 fd13 	bl	80020d4 <HAL_RCC_ClockConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006b4:	f000 fa88 	bl	8000bc8 <Error_Handler>
  }
}
 80006b8:	bf00      	nop
 80006ba:	3750      	adds	r7, #80	; 0x50
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40007000 	.word	0x40007000

080006c8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80006cc:	4b17      	ldr	r3, [pc, #92]	; (800072c <MX_SPI2_Init+0x64>)
 80006ce:	4a18      	ldr	r2, [pc, #96]	; (8000730 <MX_SPI2_Init+0x68>)
 80006d0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80006d2:	4b16      	ldr	r3, [pc, #88]	; (800072c <MX_SPI2_Init+0x64>)
 80006d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006d8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80006da:	4b14      	ldr	r3, [pc, #80]	; (800072c <MX_SPI2_Init+0x64>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80006e0:	4b12      	ldr	r3, [pc, #72]	; (800072c <MX_SPI2_Init+0x64>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006e6:	4b11      	ldr	r3, [pc, #68]	; (800072c <MX_SPI2_Init+0x64>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	; (800072c <MX_SPI2_Init+0x64>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <MX_SPI2_Init+0x64>)
 80006f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006f8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80006fa:	4b0c      	ldr	r3, [pc, #48]	; (800072c <MX_SPI2_Init+0x64>)
 80006fc:	2210      	movs	r2, #16
 80006fe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000700:	4b0a      	ldr	r3, [pc, #40]	; (800072c <MX_SPI2_Init+0x64>)
 8000702:	2200      	movs	r2, #0
 8000704:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <MX_SPI2_Init+0x64>)
 8000708:	2200      	movs	r2, #0
 800070a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800070c:	4b07      	ldr	r3, [pc, #28]	; (800072c <MX_SPI2_Init+0x64>)
 800070e:	2200      	movs	r2, #0
 8000710:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000712:	4b06      	ldr	r3, [pc, #24]	; (800072c <MX_SPI2_Init+0x64>)
 8000714:	220a      	movs	r2, #10
 8000716:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000718:	4804      	ldr	r0, [pc, #16]	; (800072c <MX_SPI2_Init+0x64>)
 800071a:	f001 fefb 	bl	8002514 <HAL_SPI_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000724:	f000 fa50 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	200000c4 	.word	0x200000c4
 8000730:	40003800 	.word	0x40003800

08000734 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000738:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <MX_TIM11_Init+0x40>)
 800073a:	4a0f      	ldr	r2, [pc, #60]	; (8000778 <MX_TIM11_Init+0x44>)
 800073c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 800073e:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <MX_TIM11_Init+0x40>)
 8000740:	2263      	movs	r2, #99	; 0x63
 8000742:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000744:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <MX_TIM11_Init+0x40>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800074a:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <MX_TIM11_Init+0x40>)
 800074c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000750:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000752:	4b08      	ldr	r3, [pc, #32]	; (8000774 <MX_TIM11_Init+0x40>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <MX_TIM11_Init+0x40>)
 800075a:	2200      	movs	r2, #0
 800075c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800075e:	4805      	ldr	r0, [pc, #20]	; (8000774 <MX_TIM11_Init+0x40>)
 8000760:	f002 f968 	bl	8002a34 <HAL_TIM_Base_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800076a:	f000 fa2d 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	2000011c 	.word	0x2000011c
 8000778:	40014800 	.word	0x40014800

0800077c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000780:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_USART2_UART_Init+0x4c>)
 8000782:	4a12      	ldr	r2, [pc, #72]	; (80007cc <MX_USART2_UART_Init+0x50>)
 8000784:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000786:	4b10      	ldr	r3, [pc, #64]	; (80007c8 <MX_USART2_UART_Init+0x4c>)
 8000788:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800078c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <MX_USART2_UART_Init+0x4c>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000794:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <MX_USART2_UART_Init+0x4c>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <MX_USART2_UART_Init+0x4c>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007a0:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_USART2_UART_Init+0x4c>)
 80007a2:	220c      	movs	r2, #12
 80007a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <MX_USART2_UART_Init+0x4c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <MX_USART2_UART_Init+0x4c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007b2:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_USART2_UART_Init+0x4c>)
 80007b4:	f002 fbe4 	bl	8002f80 <HAL_UART_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007be:	f000 fa03 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000164 	.word	0x20000164
 80007cc:	40004400 	.word	0x40004400

080007d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08a      	sub	sp, #40	; 0x28
 80007d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d6:	f107 0314 	add.w	r3, r7, #20
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
 80007ea:	4b41      	ldr	r3, [pc, #260]	; (80008f0 <MX_GPIO_Init+0x120>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a40      	ldr	r2, [pc, #256]	; (80008f0 <MX_GPIO_Init+0x120>)
 80007f0:	f043 0304 	orr.w	r3, r3, #4
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b3e      	ldr	r3, [pc, #248]	; (80008f0 <MX_GPIO_Init+0x120>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0304 	and.w	r3, r3, #4
 80007fe:	613b      	str	r3, [r7, #16]
 8000800:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	4b3a      	ldr	r3, [pc, #232]	; (80008f0 <MX_GPIO_Init+0x120>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a39      	ldr	r2, [pc, #228]	; (80008f0 <MX_GPIO_Init+0x120>)
 800080c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b37      	ldr	r3, [pc, #220]	; (80008f0 <MX_GPIO_Init+0x120>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	60bb      	str	r3, [r7, #8]
 8000822:	4b33      	ldr	r3, [pc, #204]	; (80008f0 <MX_GPIO_Init+0x120>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a32      	ldr	r2, [pc, #200]	; (80008f0 <MX_GPIO_Init+0x120>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b30      	ldr	r3, [pc, #192]	; (80008f0 <MX_GPIO_Init+0x120>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	4b2c      	ldr	r3, [pc, #176]	; (80008f0 <MX_GPIO_Init+0x120>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a2b      	ldr	r2, [pc, #172]	; (80008f0 <MX_GPIO_Init+0x120>)
 8000844:	f043 0302 	orr.w	r3, r3, #2
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b29      	ldr	r3, [pc, #164]	; (80008f0 <MX_GPIO_Init+0x120>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	f44f 7128 	mov.w	r1, #672	; 0x2a0
 800085c:	4825      	ldr	r0, [pc, #148]	; (80008f4 <MX_GPIO_Init+0x124>)
 800085e:	f001 f98d 	bl	8001b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	2180      	movs	r1, #128	; 0x80
 8000866:	4824      	ldr	r0, [pc, #144]	; (80008f8 <MX_GPIO_Init+0x128>)
 8000868:	f001 f988 	bl	8001b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800086c:	2200      	movs	r2, #0
 800086e:	2140      	movs	r1, #64	; 0x40
 8000870:	4822      	ldr	r0, [pc, #136]	; (80008fc <MX_GPIO_Init+0x12c>)
 8000872:	f001 f983 	bl	8001b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000876:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800087a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800087c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000880:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000886:	f107 0314 	add.w	r3, r7, #20
 800088a:	4619      	mov	r1, r3
 800088c:	481a      	ldr	r0, [pc, #104]	; (80008f8 <MX_GPIO_Init+0x128>)
 800088e:	f000 ffd9 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA7 PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7|GPIO_PIN_9;
 8000892:	f44f 7328 	mov.w	r3, #672	; 0x2a0
 8000896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000898:	2301      	movs	r3, #1
 800089a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a0:	2300      	movs	r3, #0
 80008a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	4619      	mov	r1, r3
 80008aa:	4812      	ldr	r0, [pc, #72]	; (80008f4 <MX_GPIO_Init+0x124>)
 80008ac:	f000 ffca 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80008b0:	2380      	movs	r3, #128	; 0x80
 80008b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b4:	2301      	movs	r3, #1
 80008b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	2300      	movs	r3, #0
 80008be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	4619      	mov	r1, r3
 80008c6:	480c      	ldr	r0, [pc, #48]	; (80008f8 <MX_GPIO_Init+0x128>)
 80008c8:	f000 ffbc 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008cc:	2340      	movs	r3, #64	; 0x40
 80008ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d0:	2301      	movs	r3, #1
 80008d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d8:	2300      	movs	r3, #0
 80008da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	4619      	mov	r1, r3
 80008e2:	4806      	ldr	r0, [pc, #24]	; (80008fc <MX_GPIO_Init+0x12c>)
 80008e4:	f000 ffae 	bl	8001844 <HAL_GPIO_Init>

}
 80008e8:	bf00      	nop
 80008ea:	3728      	adds	r7, #40	; 0x28
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40020000 	.word	0x40020000
 80008f8:	40020800 	.word	0x40020800
 80008fc:	40020400 	.word	0x40020400

08000900 <GUI_P1>:

/* USER CODE BEGIN 4 */
void GUI_P1(){  	// Show information in each players :
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af04      	add	r7, sp, #16
	// Player Number , Life points , Turns , Phase , Timer , instructions

	ST7735_WriteString(5, 5, "Player 1: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000906:	4b66      	ldr	r3, [pc, #408]	; (8000aa0 <GUI_P1+0x1a0>)
 8000908:	2200      	movs	r2, #0
 800090a:	9202      	str	r2, [sp, #8]
 800090c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000910:	9201      	str	r2, [sp, #4]
 8000912:	685a      	ldr	r2, [r3, #4]
 8000914:	9200      	str	r2, [sp, #0]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a62      	ldr	r2, [pc, #392]	; (8000aa4 <GUI_P1+0x1a4>)
 800091a:	2105      	movs	r1, #5
 800091c:	2005      	movs	r0, #5
 800091e:	f000 faee 	bl	8000efe <ST7735_WriteString>

	ST7735_WriteString(5, 20, "Life points: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000922:	4b5f      	ldr	r3, [pc, #380]	; (8000aa0 <GUI_P1+0x1a0>)
 8000924:	2200      	movs	r2, #0
 8000926:	9202      	str	r2, [sp, #8]
 8000928:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800092c:	9201      	str	r2, [sp, #4]
 800092e:	685a      	ldr	r2, [r3, #4]
 8000930:	9200      	str	r2, [sp, #0]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a5c      	ldr	r2, [pc, #368]	; (8000aa8 <GUI_P1+0x1a8>)
 8000936:	2114      	movs	r1, #20
 8000938:	2005      	movs	r0, #5
 800093a:	f000 fae0 	bl	8000efe <ST7735_WriteString>
	sprintf(C_LP1, "%d", LP1);
 800093e:	4b5b      	ldr	r3, [pc, #364]	; (8000aac <GUI_P1+0x1ac>)
 8000940:	881b      	ldrh	r3, [r3, #0]
 8000942:	461a      	mov	r2, r3
 8000944:	495a      	ldr	r1, [pc, #360]	; (8000ab0 <GUI_P1+0x1b0>)
 8000946:	485b      	ldr	r0, [pc, #364]	; (8000ab4 <GUI_P1+0x1b4>)
 8000948:	f002 fffe 	bl	8003948 <siprintf>
	ST7735_WriteString( 90, 20, C_LP1, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800094c:	4b54      	ldr	r3, [pc, #336]	; (8000aa0 <GUI_P1+0x1a0>)
 800094e:	2200      	movs	r2, #0
 8000950:	9202      	str	r2, [sp, #8]
 8000952:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000956:	9201      	str	r2, [sp, #4]
 8000958:	685a      	ldr	r2, [r3, #4]
 800095a:	9200      	str	r2, [sp, #0]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a55      	ldr	r2, [pc, #340]	; (8000ab4 <GUI_P1+0x1b4>)
 8000960:	2114      	movs	r1, #20
 8000962:	205a      	movs	r0, #90	; 0x5a
 8000964:	f000 facb 	bl	8000efe <ST7735_WriteString>

	ST7735_WriteString(5, 35, "Turns: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000968:	4b4d      	ldr	r3, [pc, #308]	; (8000aa0 <GUI_P1+0x1a0>)
 800096a:	2200      	movs	r2, #0
 800096c:	9202      	str	r2, [sp, #8]
 800096e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000972:	9201      	str	r2, [sp, #4]
 8000974:	685a      	ldr	r2, [r3, #4]
 8000976:	9200      	str	r2, [sp, #0]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4a4f      	ldr	r2, [pc, #316]	; (8000ab8 <GUI_P1+0x1b8>)
 800097c:	2123      	movs	r1, #35	; 0x23
 800097e:	2005      	movs	r0, #5
 8000980:	f000 fabd 	bl	8000efe <ST7735_WriteString>
	sprintf(C_T1, "%d", T1);
 8000984:	4b4d      	ldr	r3, [pc, #308]	; (8000abc <GUI_P1+0x1bc>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	461a      	mov	r2, r3
 800098a:	4949      	ldr	r1, [pc, #292]	; (8000ab0 <GUI_P1+0x1b0>)
 800098c:	484c      	ldr	r0, [pc, #304]	; (8000ac0 <GUI_P1+0x1c0>)
 800098e:	f002 ffdb 	bl	8003948 <siprintf>
	ST7735_WriteString( 50, 35, C_T1, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000992:	4b43      	ldr	r3, [pc, #268]	; (8000aa0 <GUI_P1+0x1a0>)
 8000994:	2200      	movs	r2, #0
 8000996:	9202      	str	r2, [sp, #8]
 8000998:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800099c:	9201      	str	r2, [sp, #4]
 800099e:	685a      	ldr	r2, [r3, #4]
 80009a0:	9200      	str	r2, [sp, #0]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a46      	ldr	r2, [pc, #280]	; (8000ac0 <GUI_P1+0x1c0>)
 80009a6:	2123      	movs	r1, #35	; 0x23
 80009a8:	2032      	movs	r0, #50	; 0x32
 80009aa:	f000 faa8 	bl	8000efe <ST7735_WriteString>

	ST7735_WriteString(60, 35, "|Phase: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80009ae:	4b3c      	ldr	r3, [pc, #240]	; (8000aa0 <GUI_P1+0x1a0>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	9202      	str	r2, [sp, #8]
 80009b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009b8:	9201      	str	r2, [sp, #4]
 80009ba:	685a      	ldr	r2, [r3, #4]
 80009bc:	9200      	str	r2, [sp, #0]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a40      	ldr	r2, [pc, #256]	; (8000ac4 <GUI_P1+0x1c4>)
 80009c2:	2123      	movs	r1, #35	; 0x23
 80009c4:	203c      	movs	r0, #60	; 0x3c
 80009c6:	f000 fa9a 	bl	8000efe <ST7735_WriteString>
	ST7735_WriteString( 110, 35, C_P1, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80009ca:	4b35      	ldr	r3, [pc, #212]	; (8000aa0 <GUI_P1+0x1a0>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	9202      	str	r2, [sp, #8]
 80009d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009d4:	9201      	str	r2, [sp, #4]
 80009d6:	685a      	ldr	r2, [r3, #4]
 80009d8:	9200      	str	r2, [sp, #0]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a3a      	ldr	r2, [pc, #232]	; (8000ac8 <GUI_P1+0x1c8>)
 80009de:	2123      	movs	r1, #35	; 0x23
 80009e0:	206e      	movs	r0, #110	; 0x6e
 80009e2:	f000 fa8c 	bl	8000efe <ST7735_WriteString>

	ST7735_WriteString(0, 50, "Remaining time: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80009e6:	4b2e      	ldr	r3, [pc, #184]	; (8000aa0 <GUI_P1+0x1a0>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	9202      	str	r2, [sp, #8]
 80009ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009f0:	9201      	str	r2, [sp, #4]
 80009f2:	685a      	ldr	r2, [r3, #4]
 80009f4:	9200      	str	r2, [sp, #0]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a34      	ldr	r2, [pc, #208]	; (8000acc <GUI_P1+0x1cc>)
 80009fa:	2132      	movs	r1, #50	; 0x32
 80009fc:	2000      	movs	r0, #0
 80009fe:	f000 fa7e 	bl	8000efe <ST7735_WriteString>
	sprintf(C_Time, "%d", Time);
 8000a02:	4b33      	ldr	r3, [pc, #204]	; (8000ad0 <GUI_P1+0x1d0>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	461a      	mov	r2, r3
 8000a08:	4929      	ldr	r1, [pc, #164]	; (8000ab0 <GUI_P1+0x1b0>)
 8000a0a:	4832      	ldr	r0, [pc, #200]	; (8000ad4 <GUI_P1+0x1d4>)
 8000a0c:	f002 ff9c 	bl	8003948 <siprintf>
	for (int i = 0 ; i < 3 ; i++){
 8000a10:	2300      	movs	r3, #0
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	e012      	b.n	8000a3c <GUI_P1+0x13c>
		if(C_Time[i] == 0){
 8000a16:	4a2f      	ldr	r2, [pc, #188]	; (8000ad4 <GUI_P1+0x1d4>)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d109      	bne.n	8000a36 <GUI_P1+0x136>
			C_Time[i] = 'S';
 8000a22:	4a2c      	ldr	r2, [pc, #176]	; (8000ad4 <GUI_P1+0x1d4>)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4413      	add	r3, r2
 8000a28:	2253      	movs	r2, #83	; 0x53
 8000a2a:	701a      	strb	r2, [r3, #0]
			C_Time[i+1] = '.';
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	4a28      	ldr	r2, [pc, #160]	; (8000ad4 <GUI_P1+0x1d4>)
 8000a32:	212e      	movs	r1, #46	; 0x2e
 8000a34:	54d1      	strb	r1, [r2, r3]
	for (int i = 0 ; i < 3 ; i++){
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2b02      	cmp	r3, #2
 8000a40:	dde9      	ble.n	8000a16 <GUI_P1+0x116>
		}
	}
	ST7735_WriteString( 105, 50, C_Time, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000a42:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <GUI_P1+0x1a0>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	9202      	str	r2, [sp, #8]
 8000a48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a4c:	9201      	str	r2, [sp, #4]
 8000a4e:	685a      	ldr	r2, [r3, #4]
 8000a50:	9200      	str	r2, [sp, #0]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a1f      	ldr	r2, [pc, #124]	; (8000ad4 <GUI_P1+0x1d4>)
 8000a56:	2132      	movs	r1, #50	; 0x32
 8000a58:	2069      	movs	r0, #105	; 0x69
 8000a5a:	f000 fa50 	bl	8000efe <ST7735_WriteString>

	ST7735_WriteString(0, 60, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000a5e:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <GUI_P1+0x1a0>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	9202      	str	r2, [sp, #8]
 8000a64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a68:	9201      	str	r2, [sp, #4]
 8000a6a:	685a      	ldr	r2, [r3, #4]
 8000a6c:	9200      	str	r2, [sp, #0]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a19      	ldr	r2, [pc, #100]	; (8000ad8 <GUI_P1+0x1d8>)
 8000a72:	213c      	movs	r1, #60	; 0x3c
 8000a74:	2000      	movs	r0, #0
 8000a76:	f000 fa42 	bl	8000efe <ST7735_WriteString>

	ST7735_WriteString(5, 90, C_ins, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <GUI_P1+0x1a0>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	9202      	str	r2, [sp, #8]
 8000a80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a84:	9201      	str	r2, [sp, #4]
 8000a86:	685a      	ldr	r2, [r3, #4]
 8000a88:	9200      	str	r2, [sp, #0]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a13      	ldr	r2, [pc, #76]	; (8000adc <GUI_P1+0x1dc>)
 8000a8e:	215a      	movs	r1, #90	; 0x5a
 8000a90:	2005      	movs	r0, #5
 8000a92:	f000 fa34 	bl	8000efe <ST7735_WriteString>


}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000000 	.word	0x20000000
 8000aa4:	08004104 	.word	0x08004104
 8000aa8:	08004110 	.word	0x08004110
 8000aac:	20000008 	.word	0x20000008
 8000ab0:	08004120 	.word	0x08004120
 8000ab4:	20000028 	.word	0x20000028
 8000ab8:	08004124 	.word	0x08004124
 8000abc:	2000000a 	.word	0x2000000a
 8000ac0:	2000002c 	.word	0x2000002c
 8000ac4:	0800412c 	.word	0x0800412c
 8000ac8:	2000000c 	.word	0x2000000c
 8000acc:	08004138 	.word	0x08004138
 8000ad0:	20000010 	.word	0x20000010
 8000ad4:	20000030 	.word	0x20000030
 8000ad8:	0800414c 	.word	0x0800414c
 8000adc:	20000014 	.word	0x20000014

08000ae0 <logic_demo>:
//	ST7735_WriteString1(75, 90, "Dev By", Font_7x10, ST7735_WHITE, ST7735_BLACK);
//	ST7735_WriteString1(75, 105, "TinnZx", Font_7x10, ST7735_WHITE, ST7735_BLACK);
	HAL_Delay(3000);
}

void logic_demo(){
 8000ae0:	b598      	push	{r3, r4, r7, lr}
 8000ae2:	af00      	add	r7, sp, #0


	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000ae4:	2120      	movs	r1, #32
 8000ae6:	4820      	ldr	r0, [pc, #128]	; (8000b68 <logic_demo+0x88>)
 8000ae8:	f001 f861 	bl	8001bae <HAL_GPIO_TogglePin>
	Time = Time_init - _micro/1000000;
 8000aec:	4b1f      	ldr	r3, [pc, #124]	; (8000b6c <logic_demo+0x8c>)
 8000aee:	781c      	ldrb	r4, [r3, #0]
 8000af0:	4b1f      	ldr	r3, [pc, #124]	; (8000b70 <logic_demo+0x90>)
 8000af2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000af6:	4a1f      	ldr	r2, [pc, #124]	; (8000b74 <logic_demo+0x94>)
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	f7ff fbc0 	bl	8000280 <__aeabi_uldivmod>
 8000b00:	4602      	mov	r2, r0
 8000b02:	460b      	mov	r3, r1
 8000b04:	b2d3      	uxtb	r3, r2
 8000b06:	1ae3      	subs	r3, r4, r3
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <logic_demo+0x98>)
 8000b0c:	701a      	strb	r2, [r3, #0]
	if (Time == 0){
 8000b0e:	4b1a      	ldr	r3, [pc, #104]	; (8000b78 <logic_demo+0x98>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d105      	bne.n	8000b22 <logic_demo+0x42>
		HAL_TIM_Base_Stop_IT(&htim11);
 8000b16:	4819      	ldr	r0, [pc, #100]	; (8000b7c <logic_demo+0x9c>)
 8000b18:	f002 f83e 	bl	8002b98 <HAL_TIM_Base_Stop_IT>
		Time = 0;
 8000b1c:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <logic_demo+0x98>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	701a      	strb	r2, [r3, #0]
		//C_ins[] = "Game Over";

	}
	SwitchState[0] = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8000b22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b26:	4816      	ldr	r0, [pc, #88]	; (8000b80 <logic_demo+0xa0>)
 8000b28:	f001 f810 	bl	8001b4c <HAL_GPIO_ReadPin>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	461a      	mov	r2, r3
 8000b30:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <logic_demo+0xa4>)
 8000b32:	701a      	strb	r2, [r3, #0]
	if (SwitchState[1] == GPIO_PIN_SET
 8000b34:	4b13      	ldr	r3, [pc, #76]	; (8000b84 <logic_demo+0xa4>)
 8000b36:	785b      	ldrb	r3, [r3, #1]
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d10f      	bne.n	8000b5c <logic_demo+0x7c>
			&& SwitchState[0] == GPIO_PIN_RESET)
 8000b3c:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <logic_demo+0xa4>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d10b      	bne.n	8000b5c <logic_demo+0x7c>
	{
		T1++;
 8000b44:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <logic_demo+0xa8>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	b2da      	uxtb	r2, r3
 8000b4c:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <logic_demo+0xa8>)
 8000b4e:	701a      	strb	r2, [r3, #0]
		LP1 = LP1 - 100;
 8000b50:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <logic_demo+0xac>)
 8000b52:	881b      	ldrh	r3, [r3, #0]
 8000b54:	3b64      	subs	r3, #100	; 0x64
 8000b56:	b29a      	uxth	r2, r3
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <logic_demo+0xac>)
 8000b5a:	801a      	strh	r2, [r3, #0]
	}
	SwitchState[1] = SwitchState[0];
 8000b5c:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <logic_demo+0xa4>)
 8000b5e:	781a      	ldrb	r2, [r3, #0]
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <logic_demo+0xa4>)
 8000b62:	705a      	strb	r2, [r3, #1]

}
 8000b64:	bf00      	nop
 8000b66:	bd98      	pop	{r3, r4, r7, pc}
 8000b68:	40020000 	.word	0x40020000
 8000b6c:	2000000f 	.word	0x2000000f
 8000b70:	200001a8 	.word	0x200001a8
 8000b74:	000f4240 	.word	0x000f4240
 8000b78:	20000010 	.word	0x20000010
 8000b7c:	2000011c 	.word	0x2000011c
 8000b80:	40020800 	.word	0x40020800
 8000b84:	200001b0 	.word	0x200001b0
 8000b88:	2000000a 	.word	0x2000000a
 8000b8c:	20000008 	.word	0x20000008

08000b90 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b90:	b4b0      	push	{r4, r5, r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
	if (htim == &htim11) {
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4a09      	ldr	r2, [pc, #36]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d10a      	bne.n	8000bb6 <HAL_TIM_PeriodElapsedCallback+0x26>
		_micro += 65535;
 8000ba0:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ba6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000baa:	1854      	adds	r4, r2, r1
 8000bac:	f143 0500 	adc.w	r5, r3, #0
 8000bb0:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000bb2:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8000bb6:	bf00      	nop
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bcb0      	pop	{r4, r5, r7}
 8000bbe:	4770      	bx	lr
 8000bc0:	2000011c 	.word	0x2000011c
 8000bc4:	200001a8 	.word	0x200001a8

08000bc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bcc:	b672      	cpsid	i
}
 8000bce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <Error_Handler+0x8>
	...

08000bd4 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2140      	movs	r1, #64	; 0x40
 8000bdc:	4802      	ldr	r0, [pc, #8]	; (8000be8 <ST7735_Select+0x14>)
 8000bde:	f000 ffcd 	bl	8001b7c <HAL_GPIO_WritePin>
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40020400 	.word	0x40020400

08000bec <ST7735_Unselect>:

void ST7735_Unselect() {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	2140      	movs	r1, #64	; 0x40
 8000bf4:	4802      	ldr	r0, [pc, #8]	; (8000c00 <ST7735_Unselect+0x14>)
 8000bf6:	f000 ffc1 	bl	8001b7c <HAL_GPIO_WritePin>
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40020400 	.word	0x40020400

08000c04 <ST7735_Select1>:
static void ST7735_Select1() {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_RESET);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2180      	movs	r1, #128	; 0x80
 8000c0c:	4802      	ldr	r0, [pc, #8]	; (8000c18 <ST7735_Select1+0x14>)
 8000c0e:	f000 ffb5 	bl	8001b7c <HAL_GPIO_WritePin>
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40020000 	.word	0x40020000

08000c1c <ST7735_Unselect1>:

void ST7735_Unselect1() {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_SET);
 8000c20:	2201      	movs	r2, #1
 8000c22:	2180      	movs	r1, #128	; 0x80
 8000c24:	4802      	ldr	r0, [pc, #8]	; (8000c30 <ST7735_Unselect1+0x14>)
 8000c26:	f000 ffa9 	bl	8001b7c <HAL_GPIO_WritePin>
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40020000 	.word	0x40020000

08000c34 <ST7735_Reset>:

static void ST7735_Reset() {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2180      	movs	r1, #128	; 0x80
 8000c3c:	4806      	ldr	r0, [pc, #24]	; (8000c58 <ST7735_Reset+0x24>)
 8000c3e:	f000 ff9d 	bl	8001b7c <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000c42:	2005      	movs	r0, #5
 8000c44:	f000 fcc8 	bl	80015d8 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8000c48:	2201      	movs	r2, #1
 8000c4a:	2180      	movs	r1, #128	; 0x80
 8000c4c:	4802      	ldr	r0, [pc, #8]	; (8000c58 <ST7735_Reset+0x24>)
 8000c4e:	f000 ff95 	bl	8001b7c <HAL_GPIO_WritePin>
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40020800 	.word	0x40020800

08000c5c <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8000c66:	2200      	movs	r2, #0
 8000c68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c6c:	4806      	ldr	r0, [pc, #24]	; (8000c88 <ST7735_WriteCommand+0x2c>)
 8000c6e:	f000 ff85 	bl	8001b7c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000c72:	1df9      	adds	r1, r7, #7
 8000c74:	f04f 33ff 	mov.w	r3, #4294967295
 8000c78:	2201      	movs	r2, #1
 8000c7a:	4804      	ldr	r0, [pc, #16]	; (8000c8c <ST7735_WriteCommand+0x30>)
 8000c7c:	f001 fcd3 	bl	8002626 <HAL_SPI_Transmit>
}
 8000c80:	bf00      	nop
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40020000 	.word	0x40020000
 8000c8c:	200000c4 	.word	0x200000c4

08000c90 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ca0:	4807      	ldr	r0, [pc, #28]	; (8000cc0 <ST7735_WriteData+0x30>)
 8000ca2:	f000 ff6b 	bl	8001b7c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	b29a      	uxth	r2, r3
 8000caa:	f04f 33ff 	mov.w	r3, #4294967295
 8000cae:	6879      	ldr	r1, [r7, #4]
 8000cb0:	4804      	ldr	r0, [pc, #16]	; (8000cc4 <ST7735_WriteData+0x34>)
 8000cb2:	f001 fcb8 	bl	8002626 <HAL_SPI_Transmit>
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40020000 	.word	0x40020000
 8000cc4:	200000c4 	.word	0x200000c4

08000cc8 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	1c5a      	adds	r2, r3, #1
 8000cd4:	607a      	str	r2, [r7, #4]
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8000cda:	e034      	b.n	8000d46 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	1c5a      	adds	r2, r3, #1
 8000ce0:	607a      	str	r2, [r7, #4]
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000ce6:	7afb      	ldrb	r3, [r7, #11]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff ffb7 	bl	8000c5c <ST7735_WriteCommand>

        numArgs = *addr++;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	1c5a      	adds	r2, r3, #1
 8000cf2:	607a      	str	r2, [r7, #4]
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000cf8:	7abb      	ldrb	r3, [r7, #10]
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d00:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8000d02:	7abb      	ldrb	r3, [r7, #10]
 8000d04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d08:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8000d0a:	7abb      	ldrb	r3, [r7, #10]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d008      	beq.n	8000d22 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000d10:	7abb      	ldrb	r3, [r7, #10]
 8000d12:	4619      	mov	r1, r3
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f7ff ffbb 	bl	8000c90 <ST7735_WriteData>
            addr += numArgs;
 8000d1a:	7abb      	ldrb	r3, [r7, #10]
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	4413      	add	r3, r2
 8000d20:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8000d22:	89bb      	ldrh	r3, [r7, #12]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d00e      	beq.n	8000d46 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	1c5a      	adds	r2, r3, #1
 8000d2c:	607a      	str	r2, [r7, #4]
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8000d32:	89bb      	ldrh	r3, [r7, #12]
 8000d34:	2bff      	cmp	r3, #255	; 0xff
 8000d36:	d102      	bne.n	8000d3e <ST7735_ExecuteCommandList+0x76>
 8000d38:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d3c:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8000d3e:	89bb      	ldrh	r3, [r7, #12]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f000 fc49 	bl	80015d8 <HAL_Delay>
    while(numCommands--) {
 8000d46:	7bfb      	ldrb	r3, [r7, #15]
 8000d48:	1e5a      	subs	r2, r3, #1
 8000d4a:	73fa      	strb	r2, [r7, #15]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d1c5      	bne.n	8000cdc <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8000d50:	bf00      	nop
 8000d52:	bf00      	nop
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8000d5a:	b590      	push	{r4, r7, lr}
 8000d5c:	b085      	sub	sp, #20
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	4604      	mov	r4, r0
 8000d62:	4608      	mov	r0, r1
 8000d64:	4611      	mov	r1, r2
 8000d66:	461a      	mov	r2, r3
 8000d68:	4623      	mov	r3, r4
 8000d6a:	71fb      	strb	r3, [r7, #7]
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	71bb      	strb	r3, [r7, #6]
 8000d70:	460b      	mov	r3, r1
 8000d72:	717b      	strb	r3, [r7, #5]
 8000d74:	4613      	mov	r3, r2
 8000d76:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8000d78:	202a      	movs	r0, #42	; 0x2a
 8000d7a:	f7ff ff6f 	bl	8000c5c <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8000d7e:	2300      	movs	r3, #0
 8000d80:	733b      	strb	r3, [r7, #12]
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	3302      	adds	r3, #2
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	737b      	strb	r3, [r7, #13]
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	73bb      	strb	r3, [r7, #14]
 8000d8e:	797b      	ldrb	r3, [r7, #5]
 8000d90:	3302      	adds	r3, #2
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000d96:	f107 030c 	add.w	r3, r7, #12
 8000d9a:	2104      	movs	r1, #4
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ff77 	bl	8000c90 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000da2:	202b      	movs	r0, #43	; 0x2b
 8000da4:	f7ff ff5a 	bl	8000c5c <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8000da8:	79bb      	ldrb	r3, [r7, #6]
 8000daa:	3301      	adds	r3, #1
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8000db0:	793b      	ldrb	r3, [r7, #4]
 8000db2:	3301      	adds	r3, #1
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000db8:	f107 030c 	add.w	r3, r7, #12
 8000dbc:	2104      	movs	r1, #4
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff ff66 	bl	8000c90 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000dc4:	202c      	movs	r0, #44	; 0x2c
 8000dc6:	f7ff ff49 	bl	8000c5c <ST7735_WriteCommand>
}
 8000dca:	bf00      	nop
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd90      	pop	{r4, r7, pc}
	...

08000dd4 <ST7735_Init>:

void ST7735_Init() {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
    ST7735_Select();
 8000dd8:	f7ff fefc 	bl	8000bd4 <ST7735_Select>
    ST7735_Select1();
 8000ddc:	f7ff ff12 	bl	8000c04 <ST7735_Select1>
    ST7735_Reset();
 8000de0:	f7ff ff28 	bl	8000c34 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8000de4:	4807      	ldr	r0, [pc, #28]	; (8000e04 <ST7735_Init+0x30>)
 8000de6:	f7ff ff6f 	bl	8000cc8 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8000dea:	4807      	ldr	r0, [pc, #28]	; (8000e08 <ST7735_Init+0x34>)
 8000dec:	f7ff ff6c 	bl	8000cc8 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8000df0:	4806      	ldr	r0, [pc, #24]	; (8000e0c <ST7735_Init+0x38>)
 8000df2:	f7ff ff69 	bl	8000cc8 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8000df6:	f7ff fef9 	bl	8000bec <ST7735_Unselect>
    ST7735_Unselect1();
 8000dfa:	f7ff ff0f 	bl	8000c1c <ST7735_Unselect1>
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	080048cc 	.word	0x080048cc
 8000e08:	08004908 	.word	0x08004908
 8000e0c:	08004918 	.word	0x08004918

08000e10 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000e10:	b082      	sub	sp, #8
 8000e12:	b590      	push	{r4, r7, lr}
 8000e14:	b089      	sub	sp, #36	; 0x24
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	637b      	str	r3, [r7, #52]	; 0x34
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	80fb      	strh	r3, [r7, #6]
 8000e1e:	460b      	mov	r3, r1
 8000e20:	80bb      	strh	r3, [r7, #4]
 8000e22:	4613      	mov	r3, r2
 8000e24:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000e26:	88fb      	ldrh	r3, [r7, #6]
 8000e28:	b2d8      	uxtb	r0, r3
 8000e2a:	88bb      	ldrh	r3, [r7, #4]
 8000e2c:	b2d9      	uxtb	r1, r3
 8000e2e:	88fb      	ldrh	r3, [r7, #6]
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000e36:	4413      	add	r3, r2
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	b2dc      	uxtb	r4, r3
 8000e3e:	88bb      	ldrh	r3, [r7, #4]
 8000e40:	b2da      	uxtb	r2, r3
 8000e42:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000e46:	4413      	add	r3, r2
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	4622      	mov	r2, r4
 8000e50:	f7ff ff83 	bl	8000d5a <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8000e54:	2300      	movs	r3, #0
 8000e56:	61fb      	str	r3, [r7, #28]
 8000e58:	e043      	b.n	8000ee2 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8000e5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000e5c:	78fb      	ldrb	r3, [r7, #3]
 8000e5e:	3b20      	subs	r3, #32
 8000e60:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000e64:	fb01 f303 	mul.w	r3, r1, r3
 8000e68:	4619      	mov	r1, r3
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	440b      	add	r3, r1
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	4413      	add	r3, r2
 8000e72:	881b      	ldrh	r3, [r3, #0]
 8000e74:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8000e76:	2300      	movs	r3, #0
 8000e78:	61bb      	str	r3, [r7, #24]
 8000e7a:	e029      	b.n	8000ed0 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8000e7c:	697a      	ldr	r2, [r7, #20]
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d00e      	beq.n	8000eaa <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000e8c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000e8e:	0a1b      	lsrs	r3, r3, #8
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	743b      	strb	r3, [r7, #16]
 8000e96:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8000e9c:	f107 0310 	add.w	r3, r7, #16
 8000ea0:	2102      	movs	r1, #2
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff fef4 	bl	8000c90 <ST7735_WriteData>
 8000ea8:	e00f      	b.n	8000eca <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000eaa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000eae:	0a1b      	lsrs	r3, r3, #8
 8000eb0:	b29b      	uxth	r3, r3
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	733b      	strb	r3, [r7, #12]
 8000eb6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8000ebe:	f107 030c 	add.w	r3, r7, #12
 8000ec2:	2102      	movs	r1, #2
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff fee3 	bl	8000c90 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	61bb      	str	r3, [r7, #24]
 8000ed0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d3cf      	bcc.n	8000e7c <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	61fb      	str	r3, [r7, #28]
 8000ee2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d3b5      	bcc.n	8000e5a <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8000eee:	bf00      	nop
 8000ef0:	bf00      	nop
 8000ef2:	3724      	adds	r7, #36	; 0x24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000efa:	b002      	add	sp, #8
 8000efc:	4770      	bx	lr

08000efe <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000efe:	b082      	sub	sp, #8
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af04      	add	r7, sp, #16
 8000f06:	603a      	str	r2, [r7, #0]
 8000f08:	617b      	str	r3, [r7, #20]
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	80fb      	strh	r3, [r7, #6]
 8000f0e:	460b      	mov	r3, r1
 8000f10:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8000f12:	f7ff fe5f 	bl	8000bd4 <ST7735_Select>

    while(*str) {
 8000f16:	e02d      	b.n	8000f74 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 8000f18:	88fb      	ldrh	r3, [r7, #6]
 8000f1a:	7d3a      	ldrb	r2, [r7, #20]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	2b7f      	cmp	r3, #127	; 0x7f
 8000f20:	dd13      	ble.n	8000f4a <ST7735_WriteString+0x4c>
            x = 0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000f26:	7d7b      	ldrb	r3, [r7, #21]
 8000f28:	b29a      	uxth	r2, r3
 8000f2a:	88bb      	ldrh	r3, [r7, #4]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8000f30:	88bb      	ldrh	r3, [r7, #4]
 8000f32:	7d7a      	ldrb	r2, [r7, #21]
 8000f34:	4413      	add	r3, r2
 8000f36:	2b7f      	cmp	r3, #127	; 0x7f
 8000f38:	dc21      	bgt.n	8000f7e <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	2b20      	cmp	r3, #32
 8000f40:	d103      	bne.n	8000f4a <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	3301      	adds	r3, #1
 8000f46:	603b      	str	r3, [r7, #0]
                continue;
 8000f48:	e014      	b.n	8000f74 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	781a      	ldrb	r2, [r3, #0]
 8000f4e:	88b9      	ldrh	r1, [r7, #4]
 8000f50:	88f8      	ldrh	r0, [r7, #6]
 8000f52:	8c3b      	ldrh	r3, [r7, #32]
 8000f54:	9302      	str	r3, [sp, #8]
 8000f56:	8bbb      	ldrh	r3, [r7, #28]
 8000f58:	9301      	str	r3, [sp, #4]
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	9300      	str	r3, [sp, #0]
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	f7ff ff56 	bl	8000e10 <ST7735_WriteChar>
        x += font.width;
 8000f64:	7d3b      	ldrb	r3, [r7, #20]
 8000f66:	b29a      	uxth	r2, r3
 8000f68:	88fb      	ldrh	r3, [r7, #6]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	80fb      	strh	r3, [r7, #6]
        str++;
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	3301      	adds	r3, #1
 8000f72:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d1cd      	bne.n	8000f18 <ST7735_WriteString+0x1a>
 8000f7c:	e000      	b.n	8000f80 <ST7735_WriteString+0x82>
                break;
 8000f7e:	bf00      	nop
    }

    ST7735_Unselect();
 8000f80:	f7ff fe34 	bl	8000bec <ST7735_Unselect>
}
 8000f84:	bf00      	nop
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f8e:	b002      	add	sp, #8
 8000f90:	4770      	bx	lr
	...

08000f94 <ST7735_FillRectangle>:
    }

    ST7735_Unselect1();
}

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000f94:	b590      	push	{r4, r7, lr}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4604      	mov	r4, r0
 8000f9c:	4608      	mov	r0, r1
 8000f9e:	4611      	mov	r1, r2
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	4623      	mov	r3, r4
 8000fa4:	80fb      	strh	r3, [r7, #6]
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	80bb      	strh	r3, [r7, #4]
 8000faa:	460b      	mov	r3, r1
 8000fac:	807b      	strh	r3, [r7, #2]
 8000fae:	4613      	mov	r3, r2
 8000fb0:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000fb2:	88fb      	ldrh	r3, [r7, #6]
 8000fb4:	2b7f      	cmp	r3, #127	; 0x7f
 8000fb6:	d858      	bhi.n	800106a <ST7735_FillRectangle+0xd6>
 8000fb8:	88bb      	ldrh	r3, [r7, #4]
 8000fba:	2b7f      	cmp	r3, #127	; 0x7f
 8000fbc:	d855      	bhi.n	800106a <ST7735_FillRectangle+0xd6>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8000fbe:	88fa      	ldrh	r2, [r7, #6]
 8000fc0:	887b      	ldrh	r3, [r7, #2]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	2b80      	cmp	r3, #128	; 0x80
 8000fc6:	dd03      	ble.n	8000fd0 <ST7735_FillRectangle+0x3c>
 8000fc8:	88fb      	ldrh	r3, [r7, #6]
 8000fca:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000fce:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8000fd0:	88ba      	ldrh	r2, [r7, #4]
 8000fd2:	883b      	ldrh	r3, [r7, #0]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	2b80      	cmp	r3, #128	; 0x80
 8000fd8:	dd03      	ble.n	8000fe2 <ST7735_FillRectangle+0x4e>
 8000fda:	88bb      	ldrh	r3, [r7, #4]
 8000fdc:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000fe0:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8000fe2:	f7ff fdf7 	bl	8000bd4 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000fe6:	88fb      	ldrh	r3, [r7, #6]
 8000fe8:	b2d8      	uxtb	r0, r3
 8000fea:	88bb      	ldrh	r3, [r7, #4]
 8000fec:	b2d9      	uxtb	r1, r3
 8000fee:	88fb      	ldrh	r3, [r7, #6]
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	887b      	ldrh	r3, [r7, #2]
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	4413      	add	r3, r2
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	b2dc      	uxtb	r4, r3
 8000ffe:	88bb      	ldrh	r3, [r7, #4]
 8001000:	b2da      	uxtb	r2, r3
 8001002:	883b      	ldrh	r3, [r7, #0]
 8001004:	b2db      	uxtb	r3, r3
 8001006:	4413      	add	r3, r2
 8001008:	b2db      	uxtb	r3, r3
 800100a:	3b01      	subs	r3, #1
 800100c:	b2db      	uxtb	r3, r3
 800100e:	4622      	mov	r2, r4
 8001010:	f7ff fea3 	bl	8000d5a <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8001014:	8c3b      	ldrh	r3, [r7, #32]
 8001016:	0a1b      	lsrs	r3, r3, #8
 8001018:	b29b      	uxth	r3, r3
 800101a:	b2db      	uxtb	r3, r3
 800101c:	733b      	strb	r3, [r7, #12]
 800101e:	8c3b      	ldrh	r3, [r7, #32]
 8001020:	b2db      	uxtb	r3, r3
 8001022:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001024:	2201      	movs	r2, #1
 8001026:	f44f 7100 	mov.w	r1, #512	; 0x200
 800102a:	4812      	ldr	r0, [pc, #72]	; (8001074 <ST7735_FillRectangle+0xe0>)
 800102c:	f000 fda6 	bl	8001b7c <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8001030:	883b      	ldrh	r3, [r7, #0]
 8001032:	80bb      	strh	r3, [r7, #4]
 8001034:	e013      	b.n	800105e <ST7735_FillRectangle+0xca>
        for(x = w; x > 0; x--) {
 8001036:	887b      	ldrh	r3, [r7, #2]
 8001038:	80fb      	strh	r3, [r7, #6]
 800103a:	e00a      	b.n	8001052 <ST7735_FillRectangle+0xbe>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800103c:	f107 010c 	add.w	r1, r7, #12
 8001040:	f04f 33ff 	mov.w	r3, #4294967295
 8001044:	2202      	movs	r2, #2
 8001046:	480c      	ldr	r0, [pc, #48]	; (8001078 <ST7735_FillRectangle+0xe4>)
 8001048:	f001 faed 	bl	8002626 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 800104c:	88fb      	ldrh	r3, [r7, #6]
 800104e:	3b01      	subs	r3, #1
 8001050:	80fb      	strh	r3, [r7, #6]
 8001052:	88fb      	ldrh	r3, [r7, #6]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d1f1      	bne.n	800103c <ST7735_FillRectangle+0xa8>
    for(y = h; y > 0; y--) {
 8001058:	88bb      	ldrh	r3, [r7, #4]
 800105a:	3b01      	subs	r3, #1
 800105c:	80bb      	strh	r3, [r7, #4]
 800105e:	88bb      	ldrh	r3, [r7, #4]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d1e8      	bne.n	8001036 <ST7735_FillRectangle+0xa2>
        }
    }

    ST7735_Unselect();
 8001064:	f7ff fdc2 	bl	8000bec <ST7735_Unselect>
 8001068:	e000      	b.n	800106c <ST7735_FillRectangle+0xd8>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800106a:	bf00      	nop
}
 800106c:	3714      	adds	r7, #20
 800106e:	46bd      	mov	sp, r7
 8001070:	bd90      	pop	{r4, r7, pc}
 8001072:	bf00      	nop
 8001074:	40020000 	.word	0x40020000
 8001078:	200000c4 	.word	0x200000c4

0800107c <ST7735_FillRectangle1>:
void ST7735_FillRectangle1(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 800107c:	b590      	push	{r4, r7, lr}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	4604      	mov	r4, r0
 8001084:	4608      	mov	r0, r1
 8001086:	4611      	mov	r1, r2
 8001088:	461a      	mov	r2, r3
 800108a:	4623      	mov	r3, r4
 800108c:	80fb      	strh	r3, [r7, #6]
 800108e:	4603      	mov	r3, r0
 8001090:	80bb      	strh	r3, [r7, #4]
 8001092:	460b      	mov	r3, r1
 8001094:	807b      	strh	r3, [r7, #2]
 8001096:	4613      	mov	r3, r2
 8001098:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800109a:	88fb      	ldrh	r3, [r7, #6]
 800109c:	2b7f      	cmp	r3, #127	; 0x7f
 800109e:	d858      	bhi.n	8001152 <ST7735_FillRectangle1+0xd6>
 80010a0:	88bb      	ldrh	r3, [r7, #4]
 80010a2:	2b7f      	cmp	r3, #127	; 0x7f
 80010a4:	d855      	bhi.n	8001152 <ST7735_FillRectangle1+0xd6>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 80010a6:	88fa      	ldrh	r2, [r7, #6]
 80010a8:	887b      	ldrh	r3, [r7, #2]
 80010aa:	4413      	add	r3, r2
 80010ac:	2b80      	cmp	r3, #128	; 0x80
 80010ae:	dd03      	ble.n	80010b8 <ST7735_FillRectangle1+0x3c>
 80010b0:	88fb      	ldrh	r3, [r7, #6]
 80010b2:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80010b6:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 80010b8:	88ba      	ldrh	r2, [r7, #4]
 80010ba:	883b      	ldrh	r3, [r7, #0]
 80010bc:	4413      	add	r3, r2
 80010be:	2b80      	cmp	r3, #128	; 0x80
 80010c0:	dd03      	ble.n	80010ca <ST7735_FillRectangle1+0x4e>
 80010c2:	88bb      	ldrh	r3, [r7, #4]
 80010c4:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80010c8:	803b      	strh	r3, [r7, #0]

    ST7735_Select1();
 80010ca:	f7ff fd9b 	bl	8000c04 <ST7735_Select1>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80010ce:	88fb      	ldrh	r3, [r7, #6]
 80010d0:	b2d8      	uxtb	r0, r3
 80010d2:	88bb      	ldrh	r3, [r7, #4]
 80010d4:	b2d9      	uxtb	r1, r3
 80010d6:	88fb      	ldrh	r3, [r7, #6]
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	887b      	ldrh	r3, [r7, #2]
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	4413      	add	r3, r2
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	3b01      	subs	r3, #1
 80010e4:	b2dc      	uxtb	r4, r3
 80010e6:	88bb      	ldrh	r3, [r7, #4]
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	883b      	ldrh	r3, [r7, #0]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	4413      	add	r3, r2
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	3b01      	subs	r3, #1
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	4622      	mov	r2, r4
 80010f8:	f7ff fe2f 	bl	8000d5a <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80010fc:	8c3b      	ldrh	r3, [r7, #32]
 80010fe:	0a1b      	lsrs	r3, r3, #8
 8001100:	b29b      	uxth	r3, r3
 8001102:	b2db      	uxtb	r3, r3
 8001104:	733b      	strb	r3, [r7, #12]
 8001106:	8c3b      	ldrh	r3, [r7, #32]
 8001108:	b2db      	uxtb	r3, r3
 800110a:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800110c:	2201      	movs	r2, #1
 800110e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001112:	4812      	ldr	r0, [pc, #72]	; (800115c <ST7735_FillRectangle1+0xe0>)
 8001114:	f000 fd32 	bl	8001b7c <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8001118:	883b      	ldrh	r3, [r7, #0]
 800111a:	80bb      	strh	r3, [r7, #4]
 800111c:	e013      	b.n	8001146 <ST7735_FillRectangle1+0xca>
        for(x = w; x > 0; x--) {
 800111e:	887b      	ldrh	r3, [r7, #2]
 8001120:	80fb      	strh	r3, [r7, #6]
 8001122:	e00a      	b.n	800113a <ST7735_FillRectangle1+0xbe>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8001124:	f107 010c 	add.w	r1, r7, #12
 8001128:	f04f 33ff 	mov.w	r3, #4294967295
 800112c:	2202      	movs	r2, #2
 800112e:	480c      	ldr	r0, [pc, #48]	; (8001160 <ST7735_FillRectangle1+0xe4>)
 8001130:	f001 fa79 	bl	8002626 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8001134:	88fb      	ldrh	r3, [r7, #6]
 8001136:	3b01      	subs	r3, #1
 8001138:	80fb      	strh	r3, [r7, #6]
 800113a:	88fb      	ldrh	r3, [r7, #6]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1f1      	bne.n	8001124 <ST7735_FillRectangle1+0xa8>
    for(y = h; y > 0; y--) {
 8001140:	88bb      	ldrh	r3, [r7, #4]
 8001142:	3b01      	subs	r3, #1
 8001144:	80bb      	strh	r3, [r7, #4]
 8001146:	88bb      	ldrh	r3, [r7, #4]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d1e8      	bne.n	800111e <ST7735_FillRectangle1+0xa2>
        }
    }

    ST7735_Unselect1();
 800114c:	f7ff fd66 	bl	8000c1c <ST7735_Unselect1>
 8001150:	e000      	b.n	8001154 <ST7735_FillRectangle1+0xd8>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001152:	bf00      	nop
}
 8001154:	3714      	adds	r7, #20
 8001156:	46bd      	mov	sp, r7
 8001158:	bd90      	pop	{r4, r7, pc}
 800115a:	bf00      	nop
 800115c:	40020000 	.word	0x40020000
 8001160:	200000c4 	.word	0x200000c4

08001164 <ST7735_FillScreen>:

    free(line);
    ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af02      	add	r7, sp, #8
 800116a:	4603      	mov	r3, r0
 800116c:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 800116e:	88fb      	ldrh	r3, [r7, #6]
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	2380      	movs	r3, #128	; 0x80
 8001174:	2280      	movs	r2, #128	; 0x80
 8001176:	2100      	movs	r1, #0
 8001178:	2000      	movs	r0, #0
 800117a:	f7ff ff0b 	bl	8000f94 <ST7735_FillRectangle>
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <ST7735_FillScreen1>:
void ST7735_FillScreen1(uint16_t color) {
 8001186:	b580      	push	{r7, lr}
 8001188:	b084      	sub	sp, #16
 800118a:	af02      	add	r7, sp, #8
 800118c:	4603      	mov	r3, r0
 800118e:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle1(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8001190:	88fb      	ldrh	r3, [r7, #6]
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2380      	movs	r3, #128	; 0x80
 8001196:	2280      	movs	r2, #128	; 0x80
 8001198:	2100      	movs	r1, #0
 800119a:	2000      	movs	r0, #0
 800119c:	f7ff ff6e 	bl	800107c <ST7735_FillRectangle1>
}
 80011a0:	bf00      	nop
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <HAL_MspInit+0x4c>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b6:	4a0f      	ldr	r2, [pc, #60]	; (80011f4 <HAL_MspInit+0x4c>)
 80011b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011bc:	6453      	str	r3, [r2, #68]	; 0x44
 80011be:	4b0d      	ldr	r3, [pc, #52]	; (80011f4 <HAL_MspInit+0x4c>)
 80011c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	603b      	str	r3, [r7, #0]
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <HAL_MspInit+0x4c>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	4a08      	ldr	r2, [pc, #32]	; (80011f4 <HAL_MspInit+0x4c>)
 80011d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d8:	6413      	str	r3, [r2, #64]	; 0x40
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_MspInit+0x4c>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e2:	603b      	str	r3, [r7, #0]
 80011e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011e6:	2007      	movs	r0, #7
 80011e8:	f000 faea 	bl	80017c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40023800 	.word	0x40023800

080011f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08a      	sub	sp, #40	; 0x28
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a28      	ldr	r2, [pc, #160]	; (80012b8 <HAL_SPI_MspInit+0xc0>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d14a      	bne.n	80012b0 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	613b      	str	r3, [r7, #16]
 800121e:	4b27      	ldr	r3, [pc, #156]	; (80012bc <HAL_SPI_MspInit+0xc4>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	4a26      	ldr	r2, [pc, #152]	; (80012bc <HAL_SPI_MspInit+0xc4>)
 8001224:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001228:	6413      	str	r3, [r2, #64]	; 0x40
 800122a:	4b24      	ldr	r3, [pc, #144]	; (80012bc <HAL_SPI_MspInit+0xc4>)
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001232:	613b      	str	r3, [r7, #16]
 8001234:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	4b20      	ldr	r3, [pc, #128]	; (80012bc <HAL_SPI_MspInit+0xc4>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	4a1f      	ldr	r2, [pc, #124]	; (80012bc <HAL_SPI_MspInit+0xc4>)
 8001240:	f043 0304 	orr.w	r3, r3, #4
 8001244:	6313      	str	r3, [r2, #48]	; 0x30
 8001246:	4b1d      	ldr	r3, [pc, #116]	; (80012bc <HAL_SPI_MspInit+0xc4>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	f003 0304 	and.w	r3, r3, #4
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	60bb      	str	r3, [r7, #8]
 8001256:	4b19      	ldr	r3, [pc, #100]	; (80012bc <HAL_SPI_MspInit+0xc4>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	4a18      	ldr	r2, [pc, #96]	; (80012bc <HAL_SPI_MspInit+0xc4>)
 800125c:	f043 0302 	orr.w	r3, r3, #2
 8001260:	6313      	str	r3, [r2, #48]	; 0x30
 8001262:	4b16      	ldr	r3, [pc, #88]	; (80012bc <HAL_SPI_MspInit+0xc4>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	60bb      	str	r3, [r7, #8]
 800126c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800126e:	2308      	movs	r3, #8
 8001270:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001272:	2302      	movs	r3, #2
 8001274:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127a:	2303      	movs	r3, #3
 800127c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800127e:	2305      	movs	r3, #5
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001282:	f107 0314 	add.w	r3, r7, #20
 8001286:	4619      	mov	r1, r3
 8001288:	480d      	ldr	r0, [pc, #52]	; (80012c0 <HAL_SPI_MspInit+0xc8>)
 800128a:	f000 fadb 	bl	8001844 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800128e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001292:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001294:	2302      	movs	r3, #2
 8001296:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129c:	2303      	movs	r3, #3
 800129e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012a0:	2305      	movs	r3, #5
 80012a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	4619      	mov	r1, r3
 80012aa:	4806      	ldr	r0, [pc, #24]	; (80012c4 <HAL_SPI_MspInit+0xcc>)
 80012ac:	f000 faca 	bl	8001844 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80012b0:	bf00      	nop
 80012b2:	3728      	adds	r7, #40	; 0x28
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40003800 	.word	0x40003800
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40020800 	.word	0x40020800
 80012c4:	40020400 	.word	0x40020400

080012c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a0e      	ldr	r2, [pc, #56]	; (8001310 <HAL_TIM_Base_MspInit+0x48>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d115      	bne.n	8001306 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	4b0d      	ldr	r3, [pc, #52]	; (8001314 <HAL_TIM_Base_MspInit+0x4c>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e2:	4a0c      	ldr	r2, [pc, #48]	; (8001314 <HAL_TIM_Base_MspInit+0x4c>)
 80012e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012e8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ea:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <HAL_TIM_Base_MspInit+0x4c>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2100      	movs	r1, #0
 80012fa:	201a      	movs	r0, #26
 80012fc:	f000 fa6b 	bl	80017d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001300:	201a      	movs	r0, #26
 8001302:	f000 fa84 	bl	800180e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001306:	bf00      	nop
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40014800 	.word	0x40014800
 8001314:	40023800 	.word	0x40023800

08001318 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08a      	sub	sp, #40	; 0x28
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a19      	ldr	r2, [pc, #100]	; (800139c <HAL_UART_MspInit+0x84>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d12b      	bne.n	8001392 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <HAL_UART_MspInit+0x88>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	4a17      	ldr	r2, [pc, #92]	; (80013a0 <HAL_UART_MspInit+0x88>)
 8001344:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001348:	6413      	str	r3, [r2, #64]	; 0x40
 800134a:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <HAL_UART_MspInit+0x88>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001352:	613b      	str	r3, [r7, #16]
 8001354:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <HAL_UART_MspInit+0x88>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	4a10      	ldr	r2, [pc, #64]	; (80013a0 <HAL_UART_MspInit+0x88>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	6313      	str	r3, [r2, #48]	; 0x30
 8001366:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <HAL_UART_MspInit+0x88>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001372:	230c      	movs	r3, #12
 8001374:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001376:	2302      	movs	r3, #2
 8001378:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137e:	2303      	movs	r3, #3
 8001380:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001382:	2307      	movs	r3, #7
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001386:	f107 0314 	add.w	r3, r7, #20
 800138a:	4619      	mov	r1, r3
 800138c:	4805      	ldr	r0, [pc, #20]	; (80013a4 <HAL_UART_MspInit+0x8c>)
 800138e:	f000 fa59 	bl	8001844 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001392:	bf00      	nop
 8001394:	3728      	adds	r7, #40	; 0x28
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40004400 	.word	0x40004400
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40020000 	.word	0x40020000

080013a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013ac:	e7fe      	b.n	80013ac <NMI_Handler+0x4>

080013ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013b2:	e7fe      	b.n	80013b2 <HardFault_Handler+0x4>

080013b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b8:	e7fe      	b.n	80013b8 <MemManage_Handler+0x4>

080013ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013be:	e7fe      	b.n	80013be <BusFault_Handler+0x4>

080013c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <UsageFault_Handler+0x4>

080013c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013f4:	f000 f8d0 	bl	8001598 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}

080013fc <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001400:	4802      	ldr	r0, [pc, #8]	; (800140c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001402:	f001 fbf8 	bl	8002bf6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	2000011c 	.word	0x2000011c

08001410 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001418:	4a14      	ldr	r2, [pc, #80]	; (800146c <_sbrk+0x5c>)
 800141a:	4b15      	ldr	r3, [pc, #84]	; (8001470 <_sbrk+0x60>)
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001424:	4b13      	ldr	r3, [pc, #76]	; (8001474 <_sbrk+0x64>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d102      	bne.n	8001432 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800142c:	4b11      	ldr	r3, [pc, #68]	; (8001474 <_sbrk+0x64>)
 800142e:	4a12      	ldr	r2, [pc, #72]	; (8001478 <_sbrk+0x68>)
 8001430:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001432:	4b10      	ldr	r3, [pc, #64]	; (8001474 <_sbrk+0x64>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4413      	add	r3, r2
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	429a      	cmp	r2, r3
 800143e:	d207      	bcs.n	8001450 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001440:	f002 f960 	bl	8003704 <__errno>
 8001444:	4603      	mov	r3, r0
 8001446:	220c      	movs	r2, #12
 8001448:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800144a:	f04f 33ff 	mov.w	r3, #4294967295
 800144e:	e009      	b.n	8001464 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001450:	4b08      	ldr	r3, [pc, #32]	; (8001474 <_sbrk+0x64>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001456:	4b07      	ldr	r3, [pc, #28]	; (8001474 <_sbrk+0x64>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4413      	add	r3, r2
 800145e:	4a05      	ldr	r2, [pc, #20]	; (8001474 <_sbrk+0x64>)
 8001460:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001462:	68fb      	ldr	r3, [r7, #12]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20020000 	.word	0x20020000
 8001470:	00000400 	.word	0x00000400
 8001474:	200001b4 	.word	0x200001b4
 8001478:	200001d0 	.word	0x200001d0

0800147c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <SystemInit+0x20>)
 8001482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001486:	4a05      	ldr	r2, [pc, #20]	; (800149c <SystemInit+0x20>)
 8001488:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800148c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80014a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014a4:	480d      	ldr	r0, [pc, #52]	; (80014dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014a6:	490e      	ldr	r1, [pc, #56]	; (80014e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014a8:	4a0e      	ldr	r2, [pc, #56]	; (80014e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014ac:	e002      	b.n	80014b4 <LoopCopyDataInit>

080014ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014b2:	3304      	adds	r3, #4

080014b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014b8:	d3f9      	bcc.n	80014ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ba:	4a0b      	ldr	r2, [pc, #44]	; (80014e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014bc:	4c0b      	ldr	r4, [pc, #44]	; (80014ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80014be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014c0:	e001      	b.n	80014c6 <LoopFillZerobss>

080014c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014c4:	3204      	adds	r2, #4

080014c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014c8:	d3fb      	bcc.n	80014c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014ca:	f7ff ffd7 	bl	800147c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ce:	f002 f91f 	bl	8003710 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014d2:	f7ff f877 	bl	80005c4 <main>
  bx  lr    
 80014d6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80014d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014e0:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 80014e4:	080049a0 	.word	0x080049a0
  ldr r2, =_sbss
 80014e8:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 80014ec:	200001cc 	.word	0x200001cc

080014f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014f0:	e7fe      	b.n	80014f0 <ADC_IRQHandler>
	...

080014f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014f8:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <HAL_Init+0x40>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a0d      	ldr	r2, [pc, #52]	; (8001534 <HAL_Init+0x40>)
 80014fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001502:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001504:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <HAL_Init+0x40>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a0a      	ldr	r2, [pc, #40]	; (8001534 <HAL_Init+0x40>)
 800150a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800150e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001510:	4b08      	ldr	r3, [pc, #32]	; (8001534 <HAL_Init+0x40>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a07      	ldr	r2, [pc, #28]	; (8001534 <HAL_Init+0x40>)
 8001516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800151a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800151c:	2003      	movs	r0, #3
 800151e:	f000 f94f 	bl	80017c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001522:	2000      	movs	r0, #0
 8001524:	f000 f808 	bl	8001538 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001528:	f7ff fe3e 	bl	80011a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40023c00 	.word	0x40023c00

08001538 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001540:	4b12      	ldr	r3, [pc, #72]	; (800158c <HAL_InitTick+0x54>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	4b12      	ldr	r3, [pc, #72]	; (8001590 <HAL_InitTick+0x58>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	4619      	mov	r1, r3
 800154a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800154e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001552:	fbb2 f3f3 	udiv	r3, r2, r3
 8001556:	4618      	mov	r0, r3
 8001558:	f000 f967 	bl	800182a <HAL_SYSTICK_Config>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e00e      	b.n	8001584 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b0f      	cmp	r3, #15
 800156a:	d80a      	bhi.n	8001582 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800156c:	2200      	movs	r2, #0
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	f04f 30ff 	mov.w	r0, #4294967295
 8001574:	f000 f92f 	bl	80017d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001578:	4a06      	ldr	r2, [pc, #24]	; (8001594 <HAL_InitTick+0x5c>)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800157e:	2300      	movs	r3, #0
 8001580:	e000      	b.n	8001584 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
}
 8001584:	4618      	mov	r0, r3
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20000034 	.word	0x20000034
 8001590:	2000003c 	.word	0x2000003c
 8001594:	20000038 	.word	0x20000038

08001598 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800159c:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <HAL_IncTick+0x20>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	461a      	mov	r2, r3
 80015a2:	4b06      	ldr	r3, [pc, #24]	; (80015bc <HAL_IncTick+0x24>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4413      	add	r3, r2
 80015a8:	4a04      	ldr	r2, [pc, #16]	; (80015bc <HAL_IncTick+0x24>)
 80015aa:	6013      	str	r3, [r2, #0]
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	2000003c 	.word	0x2000003c
 80015bc:	200001b8 	.word	0x200001b8

080015c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  return uwTick;
 80015c4:	4b03      	ldr	r3, [pc, #12]	; (80015d4 <HAL_GetTick+0x14>)
 80015c6:	681b      	ldr	r3, [r3, #0]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	200001b8 	.word	0x200001b8

080015d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015e0:	f7ff ffee 	bl	80015c0 <HAL_GetTick>
 80015e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015f0:	d005      	beq.n	80015fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015f2:	4b0a      	ldr	r3, [pc, #40]	; (800161c <HAL_Delay+0x44>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	461a      	mov	r2, r3
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	4413      	add	r3, r2
 80015fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015fe:	bf00      	nop
 8001600:	f7ff ffde 	bl	80015c0 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	429a      	cmp	r2, r3
 800160e:	d8f7      	bhi.n	8001600 <HAL_Delay+0x28>
  {
  }
}
 8001610:	bf00      	nop
 8001612:	bf00      	nop
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	2000003c 	.word	0x2000003c

08001620 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001630:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <__NVIC_SetPriorityGrouping+0x44>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001636:	68ba      	ldr	r2, [r7, #8]
 8001638:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800163c:	4013      	ands	r3, r2
 800163e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001648:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800164c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001650:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001652:	4a04      	ldr	r2, [pc, #16]	; (8001664 <__NVIC_SetPriorityGrouping+0x44>)
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	60d3      	str	r3, [r2, #12]
}
 8001658:	bf00      	nop
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800166c:	4b04      	ldr	r3, [pc, #16]	; (8001680 <__NVIC_GetPriorityGrouping+0x18>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	0a1b      	lsrs	r3, r3, #8
 8001672:	f003 0307 	and.w	r3, r3, #7
}
 8001676:	4618      	mov	r0, r3
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001692:	2b00      	cmp	r3, #0
 8001694:	db0b      	blt.n	80016ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	f003 021f 	and.w	r2, r3, #31
 800169c:	4907      	ldr	r1, [pc, #28]	; (80016bc <__NVIC_EnableIRQ+0x38>)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	095b      	lsrs	r3, r3, #5
 80016a4:	2001      	movs	r0, #1
 80016a6:	fa00 f202 	lsl.w	r2, r0, r2
 80016aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	e000e100 	.word	0xe000e100

080016c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	6039      	str	r1, [r7, #0]
 80016ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	db0a      	blt.n	80016ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	490c      	ldr	r1, [pc, #48]	; (800170c <__NVIC_SetPriority+0x4c>)
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016de:	0112      	lsls	r2, r2, #4
 80016e0:	b2d2      	uxtb	r2, r2
 80016e2:	440b      	add	r3, r1
 80016e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016e8:	e00a      	b.n	8001700 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	4908      	ldr	r1, [pc, #32]	; (8001710 <__NVIC_SetPriority+0x50>)
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	f003 030f 	and.w	r3, r3, #15
 80016f6:	3b04      	subs	r3, #4
 80016f8:	0112      	lsls	r2, r2, #4
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	440b      	add	r3, r1
 80016fe:	761a      	strb	r2, [r3, #24]
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	e000e100 	.word	0xe000e100
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001714:	b480      	push	{r7}
 8001716:	b089      	sub	sp, #36	; 0x24
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f1c3 0307 	rsb	r3, r3, #7
 800172e:	2b04      	cmp	r3, #4
 8001730:	bf28      	it	cs
 8001732:	2304      	movcs	r3, #4
 8001734:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3304      	adds	r3, #4
 800173a:	2b06      	cmp	r3, #6
 800173c:	d902      	bls.n	8001744 <NVIC_EncodePriority+0x30>
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	3b03      	subs	r3, #3
 8001742:	e000      	b.n	8001746 <NVIC_EncodePriority+0x32>
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001748:	f04f 32ff 	mov.w	r2, #4294967295
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	43da      	mvns	r2, r3
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	401a      	ands	r2, r3
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800175c:	f04f 31ff 	mov.w	r1, #4294967295
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	fa01 f303 	lsl.w	r3, r1, r3
 8001766:	43d9      	mvns	r1, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800176c:	4313      	orrs	r3, r2
         );
}
 800176e:	4618      	mov	r0, r3
 8001770:	3724      	adds	r7, #36	; 0x24
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
	...

0800177c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3b01      	subs	r3, #1
 8001788:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800178c:	d301      	bcc.n	8001792 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800178e:	2301      	movs	r3, #1
 8001790:	e00f      	b.n	80017b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001792:	4a0a      	ldr	r2, [pc, #40]	; (80017bc <SysTick_Config+0x40>)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3b01      	subs	r3, #1
 8001798:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800179a:	210f      	movs	r1, #15
 800179c:	f04f 30ff 	mov.w	r0, #4294967295
 80017a0:	f7ff ff8e 	bl	80016c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017a4:	4b05      	ldr	r3, [pc, #20]	; (80017bc <SysTick_Config+0x40>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017aa:	4b04      	ldr	r3, [pc, #16]	; (80017bc <SysTick_Config+0x40>)
 80017ac:	2207      	movs	r2, #7
 80017ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	e000e010 	.word	0xe000e010

080017c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f7ff ff29 	bl	8001620 <__NVIC_SetPriorityGrouping>
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b086      	sub	sp, #24
 80017da:	af00      	add	r7, sp, #0
 80017dc:	4603      	mov	r3, r0
 80017de:	60b9      	str	r1, [r7, #8]
 80017e0:	607a      	str	r2, [r7, #4]
 80017e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017e8:	f7ff ff3e 	bl	8001668 <__NVIC_GetPriorityGrouping>
 80017ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	68b9      	ldr	r1, [r7, #8]
 80017f2:	6978      	ldr	r0, [r7, #20]
 80017f4:	f7ff ff8e 	bl	8001714 <NVIC_EncodePriority>
 80017f8:	4602      	mov	r2, r0
 80017fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017fe:	4611      	mov	r1, r2
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff ff5d 	bl	80016c0 <__NVIC_SetPriority>
}
 8001806:	bf00      	nop
 8001808:	3718      	adds	r7, #24
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b082      	sub	sp, #8
 8001812:	af00      	add	r7, sp, #0
 8001814:	4603      	mov	r3, r0
 8001816:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff ff31 	bl	8001684 <__NVIC_EnableIRQ>
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b082      	sub	sp, #8
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff ffa2 	bl	800177c <SysTick_Config>
 8001838:	4603      	mov	r3, r0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001844:	b480      	push	{r7}
 8001846:	b089      	sub	sp, #36	; 0x24
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001852:	2300      	movs	r3, #0
 8001854:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001856:	2300      	movs	r3, #0
 8001858:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800185a:	2300      	movs	r3, #0
 800185c:	61fb      	str	r3, [r7, #28]
 800185e:	e159      	b.n	8001b14 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001860:	2201      	movs	r2, #1
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	697a      	ldr	r2, [r7, #20]
 8001870:	4013      	ands	r3, r2
 8001872:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	429a      	cmp	r2, r3
 800187a:	f040 8148 	bne.w	8001b0e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f003 0303 	and.w	r3, r3, #3
 8001886:	2b01      	cmp	r3, #1
 8001888:	d005      	beq.n	8001896 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001892:	2b02      	cmp	r3, #2
 8001894:	d130      	bne.n	80018f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	2203      	movs	r2, #3
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43db      	mvns	r3, r3
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	4013      	ands	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	68da      	ldr	r2, [r3, #12]
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4313      	orrs	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018cc:	2201      	movs	r2, #1
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	43db      	mvns	r3, r3
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4013      	ands	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	091b      	lsrs	r3, r3, #4
 80018e2:	f003 0201 	and.w	r2, r3, #1
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f003 0303 	and.w	r3, r3, #3
 8001900:	2b03      	cmp	r3, #3
 8001902:	d017      	beq.n	8001934 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	2203      	movs	r2, #3
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	43db      	mvns	r3, r3
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4013      	ands	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	689a      	ldr	r2, [r3, #8]
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4313      	orrs	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 0303 	and.w	r3, r3, #3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d123      	bne.n	8001988 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	08da      	lsrs	r2, r3, #3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	3208      	adds	r2, #8
 8001948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800194c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	f003 0307 	and.w	r3, r3, #7
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	220f      	movs	r2, #15
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4013      	ands	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	691a      	ldr	r2, [r3, #16]
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4313      	orrs	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	08da      	lsrs	r2, r3, #3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	3208      	adds	r2, #8
 8001982:	69b9      	ldr	r1, [r7, #24]
 8001984:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	2203      	movs	r2, #3
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	4013      	ands	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 0203 	and.w	r2, r3, #3
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	f000 80a2 	beq.w	8001b0e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	4b57      	ldr	r3, [pc, #348]	; (8001b2c <HAL_GPIO_Init+0x2e8>)
 80019d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d2:	4a56      	ldr	r2, [pc, #344]	; (8001b2c <HAL_GPIO_Init+0x2e8>)
 80019d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019d8:	6453      	str	r3, [r2, #68]	; 0x44
 80019da:	4b54      	ldr	r3, [pc, #336]	; (8001b2c <HAL_GPIO_Init+0x2e8>)
 80019dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019e6:	4a52      	ldr	r2, [pc, #328]	; (8001b30 <HAL_GPIO_Init+0x2ec>)
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	089b      	lsrs	r3, r3, #2
 80019ec:	3302      	adds	r3, #2
 80019ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	f003 0303 	and.w	r3, r3, #3
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	220f      	movs	r2, #15
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43db      	mvns	r3, r3
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	4013      	ands	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a49      	ldr	r2, [pc, #292]	; (8001b34 <HAL_GPIO_Init+0x2f0>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d019      	beq.n	8001a46 <HAL_GPIO_Init+0x202>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a48      	ldr	r2, [pc, #288]	; (8001b38 <HAL_GPIO_Init+0x2f4>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d013      	beq.n	8001a42 <HAL_GPIO_Init+0x1fe>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a47      	ldr	r2, [pc, #284]	; (8001b3c <HAL_GPIO_Init+0x2f8>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d00d      	beq.n	8001a3e <HAL_GPIO_Init+0x1fa>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a46      	ldr	r2, [pc, #280]	; (8001b40 <HAL_GPIO_Init+0x2fc>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d007      	beq.n	8001a3a <HAL_GPIO_Init+0x1f6>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a45      	ldr	r2, [pc, #276]	; (8001b44 <HAL_GPIO_Init+0x300>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d101      	bne.n	8001a36 <HAL_GPIO_Init+0x1f2>
 8001a32:	2304      	movs	r3, #4
 8001a34:	e008      	b.n	8001a48 <HAL_GPIO_Init+0x204>
 8001a36:	2307      	movs	r3, #7
 8001a38:	e006      	b.n	8001a48 <HAL_GPIO_Init+0x204>
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e004      	b.n	8001a48 <HAL_GPIO_Init+0x204>
 8001a3e:	2302      	movs	r3, #2
 8001a40:	e002      	b.n	8001a48 <HAL_GPIO_Init+0x204>
 8001a42:	2301      	movs	r3, #1
 8001a44:	e000      	b.n	8001a48 <HAL_GPIO_Init+0x204>
 8001a46:	2300      	movs	r3, #0
 8001a48:	69fa      	ldr	r2, [r7, #28]
 8001a4a:	f002 0203 	and.w	r2, r2, #3
 8001a4e:	0092      	lsls	r2, r2, #2
 8001a50:	4093      	lsls	r3, r2
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a58:	4935      	ldr	r1, [pc, #212]	; (8001b30 <HAL_GPIO_Init+0x2ec>)
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	089b      	lsrs	r3, r3, #2
 8001a5e:	3302      	adds	r3, #2
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a66:	4b38      	ldr	r3, [pc, #224]	; (8001b48 <HAL_GPIO_Init+0x304>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4013      	ands	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d003      	beq.n	8001a8a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a8a:	4a2f      	ldr	r2, [pc, #188]	; (8001b48 <HAL_GPIO_Init+0x304>)
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a90:	4b2d      	ldr	r3, [pc, #180]	; (8001b48 <HAL_GPIO_Init+0x304>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d003      	beq.n	8001ab4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ab4:	4a24      	ldr	r2, [pc, #144]	; (8001b48 <HAL_GPIO_Init+0x304>)
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001aba:	4b23      	ldr	r3, [pc, #140]	; (8001b48 <HAL_GPIO_Init+0x304>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ade:	4a1a      	ldr	r2, [pc, #104]	; (8001b48 <HAL_GPIO_Init+0x304>)
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ae4:	4b18      	ldr	r3, [pc, #96]	; (8001b48 <HAL_GPIO_Init+0x304>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	43db      	mvns	r3, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4013      	ands	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d003      	beq.n	8001b08 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b08:	4a0f      	ldr	r2, [pc, #60]	; (8001b48 <HAL_GPIO_Init+0x304>)
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	3301      	adds	r3, #1
 8001b12:	61fb      	str	r3, [r7, #28]
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	2b0f      	cmp	r3, #15
 8001b18:	f67f aea2 	bls.w	8001860 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b1c:	bf00      	nop
 8001b1e:	bf00      	nop
 8001b20:	3724      	adds	r7, #36	; 0x24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40013800 	.word	0x40013800
 8001b34:	40020000 	.word	0x40020000
 8001b38:	40020400 	.word	0x40020400
 8001b3c:	40020800 	.word	0x40020800
 8001b40:	40020c00 	.word	0x40020c00
 8001b44:	40021000 	.word	0x40021000
 8001b48:	40013c00 	.word	0x40013c00

08001b4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	460b      	mov	r3, r1
 8001b56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	691a      	ldr	r2, [r3, #16]
 8001b5c:	887b      	ldrh	r3, [r7, #2]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d002      	beq.n	8001b6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b64:	2301      	movs	r3, #1
 8001b66:	73fb      	strb	r3, [r7, #15]
 8001b68:	e001      	b.n	8001b6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3714      	adds	r7, #20
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	460b      	mov	r3, r1
 8001b86:	807b      	strh	r3, [r7, #2]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b8c:	787b      	ldrb	r3, [r7, #1]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b92:	887a      	ldrh	r2, [r7, #2]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b98:	e003      	b.n	8001ba2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b9a:	887b      	ldrh	r3, [r7, #2]
 8001b9c:	041a      	lsls	r2, r3, #16
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	619a      	str	r2, [r3, #24]
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b085      	sub	sp, #20
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	695b      	ldr	r3, [r3, #20]
 8001bbe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bc0:	887a      	ldrh	r2, [r7, #2]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	041a      	lsls	r2, r3, #16
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	43d9      	mvns	r1, r3
 8001bcc:	887b      	ldrh	r3, [r7, #2]
 8001bce:	400b      	ands	r3, r1
 8001bd0:	431a      	orrs	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	619a      	str	r2, [r3, #24]
}
 8001bd6:	bf00      	nop
 8001bd8:	3714      	adds	r7, #20
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
	...

08001be4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e267      	b.n	80020c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d075      	beq.n	8001cee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c02:	4b88      	ldr	r3, [pc, #544]	; (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f003 030c 	and.w	r3, r3, #12
 8001c0a:	2b04      	cmp	r3, #4
 8001c0c:	d00c      	beq.n	8001c28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c0e:	4b85      	ldr	r3, [pc, #532]	; (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c16:	2b08      	cmp	r3, #8
 8001c18:	d112      	bne.n	8001c40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c1a:	4b82      	ldr	r3, [pc, #520]	; (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c26:	d10b      	bne.n	8001c40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c28:	4b7e      	ldr	r3, [pc, #504]	; (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d05b      	beq.n	8001cec <HAL_RCC_OscConfig+0x108>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d157      	bne.n	8001cec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e242      	b.n	80020c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c48:	d106      	bne.n	8001c58 <HAL_RCC_OscConfig+0x74>
 8001c4a:	4b76      	ldr	r3, [pc, #472]	; (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a75      	ldr	r2, [pc, #468]	; (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	e01d      	b.n	8001c94 <HAL_RCC_OscConfig+0xb0>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c60:	d10c      	bne.n	8001c7c <HAL_RCC_OscConfig+0x98>
 8001c62:	4b70      	ldr	r3, [pc, #448]	; (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a6f      	ldr	r2, [pc, #444]	; (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001c68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c6c:	6013      	str	r3, [r2, #0]
 8001c6e:	4b6d      	ldr	r3, [pc, #436]	; (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a6c      	ldr	r2, [pc, #432]	; (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	e00b      	b.n	8001c94 <HAL_RCC_OscConfig+0xb0>
 8001c7c:	4b69      	ldr	r3, [pc, #420]	; (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a68      	ldr	r2, [pc, #416]	; (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001c82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c86:	6013      	str	r3, [r2, #0]
 8001c88:	4b66      	ldr	r3, [pc, #408]	; (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a65      	ldr	r2, [pc, #404]	; (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001c8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d013      	beq.n	8001cc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9c:	f7ff fc90 	bl	80015c0 <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ca4:	f7ff fc8c 	bl	80015c0 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b64      	cmp	r3, #100	; 0x64
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e207      	b.n	80020c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb6:	4b5b      	ldr	r3, [pc, #364]	; (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d0f0      	beq.n	8001ca4 <HAL_RCC_OscConfig+0xc0>
 8001cc2:	e014      	b.n	8001cee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc4:	f7ff fc7c 	bl	80015c0 <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ccc:	f7ff fc78 	bl	80015c0 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b64      	cmp	r3, #100	; 0x64
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e1f3      	b.n	80020c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cde:	4b51      	ldr	r3, [pc, #324]	; (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d1f0      	bne.n	8001ccc <HAL_RCC_OscConfig+0xe8>
 8001cea:	e000      	b.n	8001cee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d063      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cfa:	4b4a      	ldr	r3, [pc, #296]	; (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 030c 	and.w	r3, r3, #12
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00b      	beq.n	8001d1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d06:	4b47      	ldr	r3, [pc, #284]	; (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d0e:	2b08      	cmp	r3, #8
 8001d10:	d11c      	bne.n	8001d4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d12:	4b44      	ldr	r3, [pc, #272]	; (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d116      	bne.n	8001d4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d1e:	4b41      	ldr	r3, [pc, #260]	; (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d005      	beq.n	8001d36 <HAL_RCC_OscConfig+0x152>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d001      	beq.n	8001d36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e1c7      	b.n	80020c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d36:	4b3b      	ldr	r3, [pc, #236]	; (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	4937      	ldr	r1, [pc, #220]	; (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d4a:	e03a      	b.n	8001dc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d020      	beq.n	8001d96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d54:	4b34      	ldr	r3, [pc, #208]	; (8001e28 <HAL_RCC_OscConfig+0x244>)
 8001d56:	2201      	movs	r2, #1
 8001d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d5a:	f7ff fc31 	bl	80015c0 <HAL_GetTick>
 8001d5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d60:	e008      	b.n	8001d74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d62:	f7ff fc2d 	bl	80015c0 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e1a8      	b.n	80020c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d74:	4b2b      	ldr	r3, [pc, #172]	; (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d0f0      	beq.n	8001d62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d80:	4b28      	ldr	r3, [pc, #160]	; (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	4925      	ldr	r1, [pc, #148]	; (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	600b      	str	r3, [r1, #0]
 8001d94:	e015      	b.n	8001dc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d96:	4b24      	ldr	r3, [pc, #144]	; (8001e28 <HAL_RCC_OscConfig+0x244>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9c:	f7ff fc10 	bl	80015c0 <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001da4:	f7ff fc0c 	bl	80015c0 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e187      	b.n	80020c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001db6:	4b1b      	ldr	r3, [pc, #108]	; (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1f0      	bne.n	8001da4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0308 	and.w	r3, r3, #8
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d036      	beq.n	8001e3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d016      	beq.n	8001e04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dd6:	4b15      	ldr	r3, [pc, #84]	; (8001e2c <HAL_RCC_OscConfig+0x248>)
 8001dd8:	2201      	movs	r2, #1
 8001dda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ddc:	f7ff fbf0 	bl	80015c0 <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001de4:	f7ff fbec 	bl	80015c0 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e167      	b.n	80020c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001df6:	4b0b      	ldr	r3, [pc, #44]	; (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001df8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d0f0      	beq.n	8001de4 <HAL_RCC_OscConfig+0x200>
 8001e02:	e01b      	b.n	8001e3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e04:	4b09      	ldr	r3, [pc, #36]	; (8001e2c <HAL_RCC_OscConfig+0x248>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e0a:	f7ff fbd9 	bl	80015c0 <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e10:	e00e      	b.n	8001e30 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e12:	f7ff fbd5 	bl	80015c0 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d907      	bls.n	8001e30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e150      	b.n	80020c6 <HAL_RCC_OscConfig+0x4e2>
 8001e24:	40023800 	.word	0x40023800
 8001e28:	42470000 	.word	0x42470000
 8001e2c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e30:	4b88      	ldr	r3, [pc, #544]	; (8002054 <HAL_RCC_OscConfig+0x470>)
 8001e32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d1ea      	bne.n	8001e12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0304 	and.w	r3, r3, #4
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f000 8097 	beq.w	8001f78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e4e:	4b81      	ldr	r3, [pc, #516]	; (8002054 <HAL_RCC_OscConfig+0x470>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d10f      	bne.n	8001e7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60bb      	str	r3, [r7, #8]
 8001e5e:	4b7d      	ldr	r3, [pc, #500]	; (8002054 <HAL_RCC_OscConfig+0x470>)
 8001e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e62:	4a7c      	ldr	r2, [pc, #496]	; (8002054 <HAL_RCC_OscConfig+0x470>)
 8001e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e68:	6413      	str	r3, [r2, #64]	; 0x40
 8001e6a:	4b7a      	ldr	r3, [pc, #488]	; (8002054 <HAL_RCC_OscConfig+0x470>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e72:	60bb      	str	r3, [r7, #8]
 8001e74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e76:	2301      	movs	r3, #1
 8001e78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e7a:	4b77      	ldr	r3, [pc, #476]	; (8002058 <HAL_RCC_OscConfig+0x474>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d118      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e86:	4b74      	ldr	r3, [pc, #464]	; (8002058 <HAL_RCC_OscConfig+0x474>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a73      	ldr	r2, [pc, #460]	; (8002058 <HAL_RCC_OscConfig+0x474>)
 8001e8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e92:	f7ff fb95 	bl	80015c0 <HAL_GetTick>
 8001e96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e98:	e008      	b.n	8001eac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e9a:	f7ff fb91 	bl	80015c0 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e10c      	b.n	80020c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eac:	4b6a      	ldr	r3, [pc, #424]	; (8002058 <HAL_RCC_OscConfig+0x474>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d0f0      	beq.n	8001e9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d106      	bne.n	8001ece <HAL_RCC_OscConfig+0x2ea>
 8001ec0:	4b64      	ldr	r3, [pc, #400]	; (8002054 <HAL_RCC_OscConfig+0x470>)
 8001ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec4:	4a63      	ldr	r2, [pc, #396]	; (8002054 <HAL_RCC_OscConfig+0x470>)
 8001ec6:	f043 0301 	orr.w	r3, r3, #1
 8001eca:	6713      	str	r3, [r2, #112]	; 0x70
 8001ecc:	e01c      	b.n	8001f08 <HAL_RCC_OscConfig+0x324>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	2b05      	cmp	r3, #5
 8001ed4:	d10c      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x30c>
 8001ed6:	4b5f      	ldr	r3, [pc, #380]	; (8002054 <HAL_RCC_OscConfig+0x470>)
 8001ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eda:	4a5e      	ldr	r2, [pc, #376]	; (8002054 <HAL_RCC_OscConfig+0x470>)
 8001edc:	f043 0304 	orr.w	r3, r3, #4
 8001ee0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ee2:	4b5c      	ldr	r3, [pc, #368]	; (8002054 <HAL_RCC_OscConfig+0x470>)
 8001ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee6:	4a5b      	ldr	r2, [pc, #364]	; (8002054 <HAL_RCC_OscConfig+0x470>)
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	6713      	str	r3, [r2, #112]	; 0x70
 8001eee:	e00b      	b.n	8001f08 <HAL_RCC_OscConfig+0x324>
 8001ef0:	4b58      	ldr	r3, [pc, #352]	; (8002054 <HAL_RCC_OscConfig+0x470>)
 8001ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef4:	4a57      	ldr	r2, [pc, #348]	; (8002054 <HAL_RCC_OscConfig+0x470>)
 8001ef6:	f023 0301 	bic.w	r3, r3, #1
 8001efa:	6713      	str	r3, [r2, #112]	; 0x70
 8001efc:	4b55      	ldr	r3, [pc, #340]	; (8002054 <HAL_RCC_OscConfig+0x470>)
 8001efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f00:	4a54      	ldr	r2, [pc, #336]	; (8002054 <HAL_RCC_OscConfig+0x470>)
 8001f02:	f023 0304 	bic.w	r3, r3, #4
 8001f06:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d015      	beq.n	8001f3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f10:	f7ff fb56 	bl	80015c0 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f16:	e00a      	b.n	8001f2e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f18:	f7ff fb52 	bl	80015c0 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e0cb      	b.n	80020c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f2e:	4b49      	ldr	r3, [pc, #292]	; (8002054 <HAL_RCC_OscConfig+0x470>)
 8001f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d0ee      	beq.n	8001f18 <HAL_RCC_OscConfig+0x334>
 8001f3a:	e014      	b.n	8001f66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f3c:	f7ff fb40 	bl	80015c0 <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f42:	e00a      	b.n	8001f5a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f44:	f7ff fb3c 	bl	80015c0 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e0b5      	b.n	80020c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f5a:	4b3e      	ldr	r3, [pc, #248]	; (8002054 <HAL_RCC_OscConfig+0x470>)
 8001f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1ee      	bne.n	8001f44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f66:	7dfb      	ldrb	r3, [r7, #23]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d105      	bne.n	8001f78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f6c:	4b39      	ldr	r3, [pc, #228]	; (8002054 <HAL_RCC_OscConfig+0x470>)
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f70:	4a38      	ldr	r2, [pc, #224]	; (8002054 <HAL_RCC_OscConfig+0x470>)
 8001f72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f76:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f000 80a1 	beq.w	80020c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f82:	4b34      	ldr	r3, [pc, #208]	; (8002054 <HAL_RCC_OscConfig+0x470>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f003 030c 	and.w	r3, r3, #12
 8001f8a:	2b08      	cmp	r3, #8
 8001f8c:	d05c      	beq.n	8002048 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d141      	bne.n	800201a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f96:	4b31      	ldr	r3, [pc, #196]	; (800205c <HAL_RCC_OscConfig+0x478>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9c:	f7ff fb10 	bl	80015c0 <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fa4:	f7ff fb0c 	bl	80015c0 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e087      	b.n	80020c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fb6:	4b27      	ldr	r3, [pc, #156]	; (8002054 <HAL_RCC_OscConfig+0x470>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1f0      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	69da      	ldr	r2, [r3, #28]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a1b      	ldr	r3, [r3, #32]
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd0:	019b      	lsls	r3, r3, #6
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd8:	085b      	lsrs	r3, r3, #1
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	041b      	lsls	r3, r3, #16
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe4:	061b      	lsls	r3, r3, #24
 8001fe6:	491b      	ldr	r1, [pc, #108]	; (8002054 <HAL_RCC_OscConfig+0x470>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fec:	4b1b      	ldr	r3, [pc, #108]	; (800205c <HAL_RCC_OscConfig+0x478>)
 8001fee:	2201      	movs	r2, #1
 8001ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff2:	f7ff fae5 	bl	80015c0 <HAL_GetTick>
 8001ff6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ff8:	e008      	b.n	800200c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ffa:	f7ff fae1 	bl	80015c0 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e05c      	b.n	80020c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800200c:	4b11      	ldr	r3, [pc, #68]	; (8002054 <HAL_RCC_OscConfig+0x470>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d0f0      	beq.n	8001ffa <HAL_RCC_OscConfig+0x416>
 8002018:	e054      	b.n	80020c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800201a:	4b10      	ldr	r3, [pc, #64]	; (800205c <HAL_RCC_OscConfig+0x478>)
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002020:	f7ff face 	bl	80015c0 <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002028:	f7ff faca 	bl	80015c0 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e045      	b.n	80020c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800203a:	4b06      	ldr	r3, [pc, #24]	; (8002054 <HAL_RCC_OscConfig+0x470>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1f0      	bne.n	8002028 <HAL_RCC_OscConfig+0x444>
 8002046:	e03d      	b.n	80020c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d107      	bne.n	8002060 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e038      	b.n	80020c6 <HAL_RCC_OscConfig+0x4e2>
 8002054:	40023800 	.word	0x40023800
 8002058:	40007000 	.word	0x40007000
 800205c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002060:	4b1b      	ldr	r3, [pc, #108]	; (80020d0 <HAL_RCC_OscConfig+0x4ec>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d028      	beq.n	80020c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002078:	429a      	cmp	r2, r3
 800207a:	d121      	bne.n	80020c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002086:	429a      	cmp	r2, r3
 8002088:	d11a      	bne.n	80020c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002090:	4013      	ands	r3, r2
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002096:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002098:	4293      	cmp	r3, r2
 800209a:	d111      	bne.n	80020c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a6:	085b      	lsrs	r3, r3, #1
 80020a8:	3b01      	subs	r3, #1
 80020aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d107      	bne.n	80020c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020bc:	429a      	cmp	r2, r3
 80020be:	d001      	beq.n	80020c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e000      	b.n	80020c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3718      	adds	r7, #24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40023800 	.word	0x40023800

080020d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d101      	bne.n	80020e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e0cc      	b.n	8002282 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020e8:	4b68      	ldr	r3, [pc, #416]	; (800228c <HAL_RCC_ClockConfig+0x1b8>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0307 	and.w	r3, r3, #7
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d90c      	bls.n	8002110 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020f6:	4b65      	ldr	r3, [pc, #404]	; (800228c <HAL_RCC_ClockConfig+0x1b8>)
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	b2d2      	uxtb	r2, r2
 80020fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020fe:	4b63      	ldr	r3, [pc, #396]	; (800228c <HAL_RCC_ClockConfig+0x1b8>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	429a      	cmp	r2, r3
 800210a:	d001      	beq.n	8002110 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e0b8      	b.n	8002282 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d020      	beq.n	800215e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0304 	and.w	r3, r3, #4
 8002124:	2b00      	cmp	r3, #0
 8002126:	d005      	beq.n	8002134 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002128:	4b59      	ldr	r3, [pc, #356]	; (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	4a58      	ldr	r2, [pc, #352]	; (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 800212e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002132:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0308 	and.w	r3, r3, #8
 800213c:	2b00      	cmp	r3, #0
 800213e:	d005      	beq.n	800214c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002140:	4b53      	ldr	r3, [pc, #332]	; (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	4a52      	ldr	r2, [pc, #328]	; (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 8002146:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800214a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800214c:	4b50      	ldr	r3, [pc, #320]	; (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	494d      	ldr	r1, [pc, #308]	; (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 800215a:	4313      	orrs	r3, r2
 800215c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b00      	cmp	r3, #0
 8002168:	d044      	beq.n	80021f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d107      	bne.n	8002182 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002172:	4b47      	ldr	r3, [pc, #284]	; (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d119      	bne.n	80021b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e07f      	b.n	8002282 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	2b02      	cmp	r3, #2
 8002188:	d003      	beq.n	8002192 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800218e:	2b03      	cmp	r3, #3
 8002190:	d107      	bne.n	80021a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002192:	4b3f      	ldr	r3, [pc, #252]	; (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d109      	bne.n	80021b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e06f      	b.n	8002282 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a2:	4b3b      	ldr	r3, [pc, #236]	; (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e067      	b.n	8002282 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021b2:	4b37      	ldr	r3, [pc, #220]	; (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f023 0203 	bic.w	r2, r3, #3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	4934      	ldr	r1, [pc, #208]	; (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021c4:	f7ff f9fc 	bl	80015c0 <HAL_GetTick>
 80021c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ca:	e00a      	b.n	80021e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021cc:	f7ff f9f8 	bl	80015c0 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021da:	4293      	cmp	r3, r2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e04f      	b.n	8002282 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021e2:	4b2b      	ldr	r3, [pc, #172]	; (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f003 020c 	and.w	r2, r3, #12
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d1eb      	bne.n	80021cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021f4:	4b25      	ldr	r3, [pc, #148]	; (800228c <HAL_RCC_ClockConfig+0x1b8>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d20c      	bcs.n	800221c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002202:	4b22      	ldr	r3, [pc, #136]	; (800228c <HAL_RCC_ClockConfig+0x1b8>)
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	b2d2      	uxtb	r2, r2
 8002208:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800220a:	4b20      	ldr	r3, [pc, #128]	; (800228c <HAL_RCC_ClockConfig+0x1b8>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	429a      	cmp	r2, r3
 8002216:	d001      	beq.n	800221c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e032      	b.n	8002282 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0304 	and.w	r3, r3, #4
 8002224:	2b00      	cmp	r3, #0
 8002226:	d008      	beq.n	800223a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002228:	4b19      	ldr	r3, [pc, #100]	; (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	4916      	ldr	r1, [pc, #88]	; (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 8002236:	4313      	orrs	r3, r2
 8002238:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0308 	and.w	r3, r3, #8
 8002242:	2b00      	cmp	r3, #0
 8002244:	d009      	beq.n	800225a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002246:	4b12      	ldr	r3, [pc, #72]	; (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	490e      	ldr	r1, [pc, #56]	; (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 8002256:	4313      	orrs	r3, r2
 8002258:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800225a:	f000 f821 	bl	80022a0 <HAL_RCC_GetSysClockFreq>
 800225e:	4602      	mov	r2, r0
 8002260:	4b0b      	ldr	r3, [pc, #44]	; (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	091b      	lsrs	r3, r3, #4
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	490a      	ldr	r1, [pc, #40]	; (8002294 <HAL_RCC_ClockConfig+0x1c0>)
 800226c:	5ccb      	ldrb	r3, [r1, r3]
 800226e:	fa22 f303 	lsr.w	r3, r2, r3
 8002272:	4a09      	ldr	r2, [pc, #36]	; (8002298 <HAL_RCC_ClockConfig+0x1c4>)
 8002274:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002276:	4b09      	ldr	r3, [pc, #36]	; (800229c <HAL_RCC_ClockConfig+0x1c8>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff f95c 	bl	8001538 <HAL_InitTick>

  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	40023c00 	.word	0x40023c00
 8002290:	40023800 	.word	0x40023800
 8002294:	08004944 	.word	0x08004944
 8002298:	20000034 	.word	0x20000034
 800229c:	20000038 	.word	0x20000038

080022a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022a4:	b094      	sub	sp, #80	; 0x50
 80022a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80022a8:	2300      	movs	r3, #0
 80022aa:	647b      	str	r3, [r7, #68]	; 0x44
 80022ac:	2300      	movs	r3, #0
 80022ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022b0:	2300      	movs	r3, #0
 80022b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80022b4:	2300      	movs	r3, #0
 80022b6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022b8:	4b79      	ldr	r3, [pc, #484]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f003 030c 	and.w	r3, r3, #12
 80022c0:	2b08      	cmp	r3, #8
 80022c2:	d00d      	beq.n	80022e0 <HAL_RCC_GetSysClockFreq+0x40>
 80022c4:	2b08      	cmp	r3, #8
 80022c6:	f200 80e1 	bhi.w	800248c <HAL_RCC_GetSysClockFreq+0x1ec>
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d002      	beq.n	80022d4 <HAL_RCC_GetSysClockFreq+0x34>
 80022ce:	2b04      	cmp	r3, #4
 80022d0:	d003      	beq.n	80022da <HAL_RCC_GetSysClockFreq+0x3a>
 80022d2:	e0db      	b.n	800248c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022d4:	4b73      	ldr	r3, [pc, #460]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80022d6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80022d8:	e0db      	b.n	8002492 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022da:	4b73      	ldr	r3, [pc, #460]	; (80024a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80022dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80022de:	e0d8      	b.n	8002492 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022e0:	4b6f      	ldr	r3, [pc, #444]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022e8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022ea:	4b6d      	ldr	r3, [pc, #436]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d063      	beq.n	80023be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022f6:	4b6a      	ldr	r3, [pc, #424]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	099b      	lsrs	r3, r3, #6
 80022fc:	2200      	movs	r2, #0
 80022fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002300:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002304:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002308:	633b      	str	r3, [r7, #48]	; 0x30
 800230a:	2300      	movs	r3, #0
 800230c:	637b      	str	r3, [r7, #52]	; 0x34
 800230e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002312:	4622      	mov	r2, r4
 8002314:	462b      	mov	r3, r5
 8002316:	f04f 0000 	mov.w	r0, #0
 800231a:	f04f 0100 	mov.w	r1, #0
 800231e:	0159      	lsls	r1, r3, #5
 8002320:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002324:	0150      	lsls	r0, r2, #5
 8002326:	4602      	mov	r2, r0
 8002328:	460b      	mov	r3, r1
 800232a:	4621      	mov	r1, r4
 800232c:	1a51      	subs	r1, r2, r1
 800232e:	6139      	str	r1, [r7, #16]
 8002330:	4629      	mov	r1, r5
 8002332:	eb63 0301 	sbc.w	r3, r3, r1
 8002336:	617b      	str	r3, [r7, #20]
 8002338:	f04f 0200 	mov.w	r2, #0
 800233c:	f04f 0300 	mov.w	r3, #0
 8002340:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002344:	4659      	mov	r1, fp
 8002346:	018b      	lsls	r3, r1, #6
 8002348:	4651      	mov	r1, sl
 800234a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800234e:	4651      	mov	r1, sl
 8002350:	018a      	lsls	r2, r1, #6
 8002352:	4651      	mov	r1, sl
 8002354:	ebb2 0801 	subs.w	r8, r2, r1
 8002358:	4659      	mov	r1, fp
 800235a:	eb63 0901 	sbc.w	r9, r3, r1
 800235e:	f04f 0200 	mov.w	r2, #0
 8002362:	f04f 0300 	mov.w	r3, #0
 8002366:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800236a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800236e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002372:	4690      	mov	r8, r2
 8002374:	4699      	mov	r9, r3
 8002376:	4623      	mov	r3, r4
 8002378:	eb18 0303 	adds.w	r3, r8, r3
 800237c:	60bb      	str	r3, [r7, #8]
 800237e:	462b      	mov	r3, r5
 8002380:	eb49 0303 	adc.w	r3, r9, r3
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	f04f 0200 	mov.w	r2, #0
 800238a:	f04f 0300 	mov.w	r3, #0
 800238e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002392:	4629      	mov	r1, r5
 8002394:	024b      	lsls	r3, r1, #9
 8002396:	4621      	mov	r1, r4
 8002398:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800239c:	4621      	mov	r1, r4
 800239e:	024a      	lsls	r2, r1, #9
 80023a0:	4610      	mov	r0, r2
 80023a2:	4619      	mov	r1, r3
 80023a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023a6:	2200      	movs	r2, #0
 80023a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80023aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80023ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80023b0:	f7fd ff66 	bl	8000280 <__aeabi_uldivmod>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	4613      	mov	r3, r2
 80023ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023bc:	e058      	b.n	8002470 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023be:	4b38      	ldr	r3, [pc, #224]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	099b      	lsrs	r3, r3, #6
 80023c4:	2200      	movs	r2, #0
 80023c6:	4618      	mov	r0, r3
 80023c8:	4611      	mov	r1, r2
 80023ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80023ce:	623b      	str	r3, [r7, #32]
 80023d0:	2300      	movs	r3, #0
 80023d2:	627b      	str	r3, [r7, #36]	; 0x24
 80023d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80023d8:	4642      	mov	r2, r8
 80023da:	464b      	mov	r3, r9
 80023dc:	f04f 0000 	mov.w	r0, #0
 80023e0:	f04f 0100 	mov.w	r1, #0
 80023e4:	0159      	lsls	r1, r3, #5
 80023e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023ea:	0150      	lsls	r0, r2, #5
 80023ec:	4602      	mov	r2, r0
 80023ee:	460b      	mov	r3, r1
 80023f0:	4641      	mov	r1, r8
 80023f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80023f6:	4649      	mov	r1, r9
 80023f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80023fc:	f04f 0200 	mov.w	r2, #0
 8002400:	f04f 0300 	mov.w	r3, #0
 8002404:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002408:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800240c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002410:	ebb2 040a 	subs.w	r4, r2, sl
 8002414:	eb63 050b 	sbc.w	r5, r3, fp
 8002418:	f04f 0200 	mov.w	r2, #0
 800241c:	f04f 0300 	mov.w	r3, #0
 8002420:	00eb      	lsls	r3, r5, #3
 8002422:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002426:	00e2      	lsls	r2, r4, #3
 8002428:	4614      	mov	r4, r2
 800242a:	461d      	mov	r5, r3
 800242c:	4643      	mov	r3, r8
 800242e:	18e3      	adds	r3, r4, r3
 8002430:	603b      	str	r3, [r7, #0]
 8002432:	464b      	mov	r3, r9
 8002434:	eb45 0303 	adc.w	r3, r5, r3
 8002438:	607b      	str	r3, [r7, #4]
 800243a:	f04f 0200 	mov.w	r2, #0
 800243e:	f04f 0300 	mov.w	r3, #0
 8002442:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002446:	4629      	mov	r1, r5
 8002448:	028b      	lsls	r3, r1, #10
 800244a:	4621      	mov	r1, r4
 800244c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002450:	4621      	mov	r1, r4
 8002452:	028a      	lsls	r2, r1, #10
 8002454:	4610      	mov	r0, r2
 8002456:	4619      	mov	r1, r3
 8002458:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800245a:	2200      	movs	r2, #0
 800245c:	61bb      	str	r3, [r7, #24]
 800245e:	61fa      	str	r2, [r7, #28]
 8002460:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002464:	f7fd ff0c 	bl	8000280 <__aeabi_uldivmod>
 8002468:	4602      	mov	r2, r0
 800246a:	460b      	mov	r3, r1
 800246c:	4613      	mov	r3, r2
 800246e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002470:	4b0b      	ldr	r3, [pc, #44]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	0c1b      	lsrs	r3, r3, #16
 8002476:	f003 0303 	and.w	r3, r3, #3
 800247a:	3301      	adds	r3, #1
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002480:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002482:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002484:	fbb2 f3f3 	udiv	r3, r2, r3
 8002488:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800248a:	e002      	b.n	8002492 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800248c:	4b05      	ldr	r3, [pc, #20]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800248e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002490:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002492:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002494:	4618      	mov	r0, r3
 8002496:	3750      	adds	r7, #80	; 0x50
 8002498:	46bd      	mov	sp, r7
 800249a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800249e:	bf00      	nop
 80024a0:	40023800 	.word	0x40023800
 80024a4:	00f42400 	.word	0x00f42400
 80024a8:	007a1200 	.word	0x007a1200

080024ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024b0:	4b03      	ldr	r3, [pc, #12]	; (80024c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80024b2:	681b      	ldr	r3, [r3, #0]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	20000034 	.word	0x20000034

080024c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024c8:	f7ff fff0 	bl	80024ac <HAL_RCC_GetHCLKFreq>
 80024cc:	4602      	mov	r2, r0
 80024ce:	4b05      	ldr	r3, [pc, #20]	; (80024e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	0a9b      	lsrs	r3, r3, #10
 80024d4:	f003 0307 	and.w	r3, r3, #7
 80024d8:	4903      	ldr	r1, [pc, #12]	; (80024e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024da:	5ccb      	ldrb	r3, [r1, r3]
 80024dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40023800 	.word	0x40023800
 80024e8:	08004954 	.word	0x08004954

080024ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024f0:	f7ff ffdc 	bl	80024ac <HAL_RCC_GetHCLKFreq>
 80024f4:	4602      	mov	r2, r0
 80024f6:	4b05      	ldr	r3, [pc, #20]	; (800250c <HAL_RCC_GetPCLK2Freq+0x20>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	0b5b      	lsrs	r3, r3, #13
 80024fc:	f003 0307 	and.w	r3, r3, #7
 8002500:	4903      	ldr	r1, [pc, #12]	; (8002510 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002502:	5ccb      	ldrb	r3, [r1, r3]
 8002504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002508:	4618      	mov	r0, r3
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40023800 	.word	0x40023800
 8002510:	08004954 	.word	0x08004954

08002514 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e07b      	b.n	800261e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252a:	2b00      	cmp	r3, #0
 800252c:	d108      	bne.n	8002540 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002536:	d009      	beq.n	800254c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	61da      	str	r2, [r3, #28]
 800253e:	e005      	b.n	800254c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d106      	bne.n	800256c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f7fe fe46 	bl	80011f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2202      	movs	r2, #2
 8002570:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002582:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002594:	431a      	orrs	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800259e:	431a      	orrs	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	431a      	orrs	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	431a      	orrs	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025bc:	431a      	orrs	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025c6:	431a      	orrs	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025d0:	ea42 0103 	orr.w	r1, r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	430a      	orrs	r2, r1
 80025e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	0c1b      	lsrs	r3, r3, #16
 80025ea:	f003 0104 	and.w	r1, r3, #4
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f2:	f003 0210 	and.w	r2, r3, #16
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	430a      	orrs	r2, r1
 80025fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	69da      	ldr	r2, [r3, #28]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800260c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b088      	sub	sp, #32
 800262a:	af00      	add	r7, sp, #0
 800262c:	60f8      	str	r0, [r7, #12]
 800262e:	60b9      	str	r1, [r7, #8]
 8002630:	603b      	str	r3, [r7, #0]
 8002632:	4613      	mov	r3, r2
 8002634:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002636:	2300      	movs	r3, #0
 8002638:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002640:	2b01      	cmp	r3, #1
 8002642:	d101      	bne.n	8002648 <HAL_SPI_Transmit+0x22>
 8002644:	2302      	movs	r3, #2
 8002646:	e126      	b.n	8002896 <HAL_SPI_Transmit+0x270>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002650:	f7fe ffb6 	bl	80015c0 <HAL_GetTick>
 8002654:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002656:	88fb      	ldrh	r3, [r7, #6]
 8002658:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b01      	cmp	r3, #1
 8002664:	d002      	beq.n	800266c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002666:	2302      	movs	r3, #2
 8002668:	77fb      	strb	r3, [r7, #31]
    goto error;
 800266a:	e10b      	b.n	8002884 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d002      	beq.n	8002678 <HAL_SPI_Transmit+0x52>
 8002672:	88fb      	ldrh	r3, [r7, #6]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d102      	bne.n	800267e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800267c:	e102      	b.n	8002884 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2203      	movs	r2, #3
 8002682:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	68ba      	ldr	r2, [r7, #8]
 8002690:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	88fa      	ldrh	r2, [r7, #6]
 8002696:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	88fa      	ldrh	r2, [r7, #6]
 800269c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026c4:	d10f      	bne.n	80026e6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f0:	2b40      	cmp	r3, #64	; 0x40
 80026f2:	d007      	beq.n	8002704 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002702:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800270c:	d14b      	bne.n	80027a6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d002      	beq.n	800271c <HAL_SPI_Transmit+0xf6>
 8002716:	8afb      	ldrh	r3, [r7, #22]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d13e      	bne.n	800279a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002720:	881a      	ldrh	r2, [r3, #0]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272c:	1c9a      	adds	r2, r3, #2
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002736:	b29b      	uxth	r3, r3
 8002738:	3b01      	subs	r3, #1
 800273a:	b29a      	uxth	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002740:	e02b      	b.n	800279a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b02      	cmp	r3, #2
 800274e:	d112      	bne.n	8002776 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002754:	881a      	ldrh	r2, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002760:	1c9a      	adds	r2, r3, #2
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800276a:	b29b      	uxth	r3, r3
 800276c:	3b01      	subs	r3, #1
 800276e:	b29a      	uxth	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	86da      	strh	r2, [r3, #54]	; 0x36
 8002774:	e011      	b.n	800279a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002776:	f7fe ff23 	bl	80015c0 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	429a      	cmp	r2, r3
 8002784:	d803      	bhi.n	800278e <HAL_SPI_Transmit+0x168>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800278c:	d102      	bne.n	8002794 <HAL_SPI_Transmit+0x16e>
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d102      	bne.n	800279a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002798:	e074      	b.n	8002884 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800279e:	b29b      	uxth	r3, r3
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1ce      	bne.n	8002742 <HAL_SPI_Transmit+0x11c>
 80027a4:	e04c      	b.n	8002840 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d002      	beq.n	80027b4 <HAL_SPI_Transmit+0x18e>
 80027ae:	8afb      	ldrh	r3, [r7, #22]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d140      	bne.n	8002836 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	330c      	adds	r3, #12
 80027be:	7812      	ldrb	r2, [r2, #0]
 80027c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	1c5a      	adds	r2, r3, #1
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	3b01      	subs	r3, #1
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80027da:	e02c      	b.n	8002836 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d113      	bne.n	8002812 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	330c      	adds	r3, #12
 80027f4:	7812      	ldrb	r2, [r2, #0]
 80027f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fc:	1c5a      	adds	r2, r3, #1
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002806:	b29b      	uxth	r3, r3
 8002808:	3b01      	subs	r3, #1
 800280a:	b29a      	uxth	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002810:	e011      	b.n	8002836 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002812:	f7fe fed5 	bl	80015c0 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	429a      	cmp	r2, r3
 8002820:	d803      	bhi.n	800282a <HAL_SPI_Transmit+0x204>
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002828:	d102      	bne.n	8002830 <HAL_SPI_Transmit+0x20a>
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d102      	bne.n	8002836 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002834:	e026      	b.n	8002884 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800283a:	b29b      	uxth	r3, r3
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1cd      	bne.n	80027dc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	6839      	ldr	r1, [r7, #0]
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f000 f8b3 	bl	80029b0 <SPI_EndRxTxTransaction>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d002      	beq.n	8002856 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2220      	movs	r2, #32
 8002854:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d10a      	bne.n	8002874 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800285e:	2300      	movs	r3, #0
 8002860:	613b      	str	r3, [r7, #16]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	613b      	str	r3, [r7, #16]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	613b      	str	r3, [r7, #16]
 8002872:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002878:	2b00      	cmp	r3, #0
 800287a:	d002      	beq.n	8002882 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	77fb      	strb	r3, [r7, #31]
 8002880:	e000      	b.n	8002884 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002882:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002894:	7ffb      	ldrb	r3, [r7, #31]
}
 8002896:	4618      	mov	r0, r3
 8002898:	3720      	adds	r7, #32
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
	...

080028a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b088      	sub	sp, #32
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	603b      	str	r3, [r7, #0]
 80028ac:	4613      	mov	r3, r2
 80028ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80028b0:	f7fe fe86 	bl	80015c0 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b8:	1a9b      	subs	r3, r3, r2
 80028ba:	683a      	ldr	r2, [r7, #0]
 80028bc:	4413      	add	r3, r2
 80028be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80028c0:	f7fe fe7e 	bl	80015c0 <HAL_GetTick>
 80028c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80028c6:	4b39      	ldr	r3, [pc, #228]	; (80029ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	015b      	lsls	r3, r3, #5
 80028cc:	0d1b      	lsrs	r3, r3, #20
 80028ce:	69fa      	ldr	r2, [r7, #28]
 80028d0:	fb02 f303 	mul.w	r3, r2, r3
 80028d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028d6:	e054      	b.n	8002982 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028de:	d050      	beq.n	8002982 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80028e0:	f7fe fe6e 	bl	80015c0 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	69fa      	ldr	r2, [r7, #28]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d902      	bls.n	80028f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d13d      	bne.n	8002972 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002904:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800290e:	d111      	bne.n	8002934 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002918:	d004      	beq.n	8002924 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002922:	d107      	bne.n	8002934 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002932:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002938:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800293c:	d10f      	bne.n	800295e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800295c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2201      	movs	r2, #1
 8002962:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e017      	b.n	80029a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d101      	bne.n	800297c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002978:	2300      	movs	r3, #0
 800297a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	3b01      	subs	r3, #1
 8002980:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	4013      	ands	r3, r2
 800298c:	68ba      	ldr	r2, [r7, #8]
 800298e:	429a      	cmp	r2, r3
 8002990:	bf0c      	ite	eq
 8002992:	2301      	moveq	r3, #1
 8002994:	2300      	movne	r3, #0
 8002996:	b2db      	uxtb	r3, r3
 8002998:	461a      	mov	r2, r3
 800299a:	79fb      	ldrb	r3, [r7, #7]
 800299c:	429a      	cmp	r2, r3
 800299e:	d19b      	bne.n	80028d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3720      	adds	r7, #32
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	20000034 	.word	0x20000034

080029b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b088      	sub	sp, #32
 80029b4:	af02      	add	r7, sp, #8
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80029bc:	4b1b      	ldr	r3, [pc, #108]	; (8002a2c <SPI_EndRxTxTransaction+0x7c>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a1b      	ldr	r2, [pc, #108]	; (8002a30 <SPI_EndRxTxTransaction+0x80>)
 80029c2:	fba2 2303 	umull	r2, r3, r2, r3
 80029c6:	0d5b      	lsrs	r3, r3, #21
 80029c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80029cc:	fb02 f303 	mul.w	r3, r2, r3
 80029d0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029da:	d112      	bne.n	8002a02 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	9300      	str	r3, [sp, #0]
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	2200      	movs	r2, #0
 80029e4:	2180      	movs	r1, #128	; 0x80
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f7ff ff5a 	bl	80028a0 <SPI_WaitFlagStateUntilTimeout>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d016      	beq.n	8002a20 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f6:	f043 0220 	orr.w	r2, r3, #32
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e00f      	b.n	8002a22 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00a      	beq.n	8002a1e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a18:	2b80      	cmp	r3, #128	; 0x80
 8002a1a:	d0f2      	beq.n	8002a02 <SPI_EndRxTxTransaction+0x52>
 8002a1c:	e000      	b.n	8002a20 <SPI_EndRxTxTransaction+0x70>
        break;
 8002a1e:	bf00      	nop
  }

  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3718      	adds	r7, #24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	20000034 	.word	0x20000034
 8002a30:	165e9f81 	.word	0x165e9f81

08002a34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e041      	b.n	8002aca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d106      	bne.n	8002a60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7fe fc34 	bl	80012c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2202      	movs	r2, #2
 8002a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	3304      	adds	r3, #4
 8002a70:	4619      	mov	r1, r3
 8002a72:	4610      	mov	r0, r2
 8002a74:	f000 f9f0 	bl	8002e58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
	...

08002ad4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d001      	beq.n	8002aec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e044      	b.n	8002b76 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2202      	movs	r2, #2
 8002af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68da      	ldr	r2, [r3, #12]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f042 0201 	orr.w	r2, r2, #1
 8002b02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a1e      	ldr	r2, [pc, #120]	; (8002b84 <HAL_TIM_Base_Start_IT+0xb0>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d018      	beq.n	8002b40 <HAL_TIM_Base_Start_IT+0x6c>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b16:	d013      	beq.n	8002b40 <HAL_TIM_Base_Start_IT+0x6c>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a1a      	ldr	r2, [pc, #104]	; (8002b88 <HAL_TIM_Base_Start_IT+0xb4>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d00e      	beq.n	8002b40 <HAL_TIM_Base_Start_IT+0x6c>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a19      	ldr	r2, [pc, #100]	; (8002b8c <HAL_TIM_Base_Start_IT+0xb8>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d009      	beq.n	8002b40 <HAL_TIM_Base_Start_IT+0x6c>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a17      	ldr	r2, [pc, #92]	; (8002b90 <HAL_TIM_Base_Start_IT+0xbc>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d004      	beq.n	8002b40 <HAL_TIM_Base_Start_IT+0x6c>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a16      	ldr	r2, [pc, #88]	; (8002b94 <HAL_TIM_Base_Start_IT+0xc0>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d111      	bne.n	8002b64 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 0307 	and.w	r3, r3, #7
 8002b4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2b06      	cmp	r3, #6
 8002b50:	d010      	beq.n	8002b74 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f042 0201 	orr.w	r2, r2, #1
 8002b60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b62:	e007      	b.n	8002b74 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f042 0201 	orr.w	r2, r2, #1
 8002b72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3714      	adds	r7, #20
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	40010000 	.word	0x40010000
 8002b88:	40000400 	.word	0x40000400
 8002b8c:	40000800 	.word	0x40000800
 8002b90:	40000c00 	.word	0x40000c00
 8002b94:	40014000 	.word	0x40014000

08002b98 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68da      	ldr	r2, [r3, #12]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 0201 	bic.w	r2, r2, #1
 8002bae:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6a1a      	ldr	r2, [r3, #32]
 8002bb6:	f241 1311 	movw	r3, #4369	; 0x1111
 8002bba:	4013      	ands	r3, r2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d10f      	bne.n	8002be0 <HAL_TIM_Base_Stop_IT+0x48>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6a1a      	ldr	r2, [r3, #32]
 8002bc6:	f240 4344 	movw	r3, #1092	; 0x444
 8002bca:	4013      	ands	r3, r2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d107      	bne.n	8002be0 <HAL_TIM_Base_Stop_IT+0x48>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 0201 	bic.w	r2, r2, #1
 8002bde:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b082      	sub	sp, #8
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d122      	bne.n	8002c52 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d11b      	bne.n	8002c52 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f06f 0202 	mvn.w	r2, #2
 8002c22:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	f003 0303 	and.w	r3, r3, #3
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d003      	beq.n	8002c40 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f000 f8ee 	bl	8002e1a <HAL_TIM_IC_CaptureCallback>
 8002c3e:	e005      	b.n	8002c4c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 f8e0 	bl	8002e06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 f8f1 	bl	8002e2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	2b04      	cmp	r3, #4
 8002c5e:	d122      	bne.n	8002ca6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	f003 0304 	and.w	r3, r3, #4
 8002c6a:	2b04      	cmp	r3, #4
 8002c6c:	d11b      	bne.n	8002ca6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f06f 0204 	mvn.w	r2, #4
 8002c76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d003      	beq.n	8002c94 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f8c4 	bl	8002e1a <HAL_TIM_IC_CaptureCallback>
 8002c92:	e005      	b.n	8002ca0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 f8b6 	bl	8002e06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 f8c7 	bl	8002e2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	f003 0308 	and.w	r3, r3, #8
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	d122      	bne.n	8002cfa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	f003 0308 	and.w	r3, r3, #8
 8002cbe:	2b08      	cmp	r3, #8
 8002cc0:	d11b      	bne.n	8002cfa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f06f 0208 	mvn.w	r2, #8
 8002cca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2204      	movs	r2, #4
 8002cd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	69db      	ldr	r3, [r3, #28]
 8002cd8:	f003 0303 	and.w	r3, r3, #3
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d003      	beq.n	8002ce8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 f89a 	bl	8002e1a <HAL_TIM_IC_CaptureCallback>
 8002ce6:	e005      	b.n	8002cf4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 f88c 	bl	8002e06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 f89d 	bl	8002e2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	f003 0310 	and.w	r3, r3, #16
 8002d04:	2b10      	cmp	r3, #16
 8002d06:	d122      	bne.n	8002d4e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	f003 0310 	and.w	r3, r3, #16
 8002d12:	2b10      	cmp	r3, #16
 8002d14:	d11b      	bne.n	8002d4e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f06f 0210 	mvn.w	r2, #16
 8002d1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2208      	movs	r2, #8
 8002d24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	69db      	ldr	r3, [r3, #28]
 8002d2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d003      	beq.n	8002d3c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 f870 	bl	8002e1a <HAL_TIM_IC_CaptureCallback>
 8002d3a:	e005      	b.n	8002d48 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f000 f862 	bl	8002e06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 f873 	bl	8002e2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d10e      	bne.n	8002d7a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d107      	bne.n	8002d7a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f06f 0201 	mvn.w	r2, #1
 8002d72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f7fd ff0b 	bl	8000b90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d84:	2b80      	cmp	r3, #128	; 0x80
 8002d86:	d10e      	bne.n	8002da6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d92:	2b80      	cmp	r3, #128	; 0x80
 8002d94:	d107      	bne.n	8002da6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 f8e3 	bl	8002f6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db0:	2b40      	cmp	r3, #64	; 0x40
 8002db2:	d10e      	bne.n	8002dd2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dbe:	2b40      	cmp	r3, #64	; 0x40
 8002dc0:	d107      	bne.n	8002dd2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002dca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 f838 	bl	8002e42 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	f003 0320 	and.w	r3, r3, #32
 8002ddc:	2b20      	cmp	r3, #32
 8002dde:	d10e      	bne.n	8002dfe <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	f003 0320 	and.w	r3, r3, #32
 8002dea:	2b20      	cmp	r3, #32
 8002dec:	d107      	bne.n	8002dfe <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f06f 0220 	mvn.w	r2, #32
 8002df6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 f8ad 	bl	8002f58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002dfe:	bf00      	nop
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b083      	sub	sp, #12
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b083      	sub	sp, #12
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	b083      	sub	sp, #12
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e36:	bf00      	nop
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr

08002e42 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e42:	b480      	push	{r7}
 8002e44:	b083      	sub	sp, #12
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e4a:	bf00      	nop
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
	...

08002e58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a34      	ldr	r2, [pc, #208]	; (8002f3c <TIM_Base_SetConfig+0xe4>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d00f      	beq.n	8002e90 <TIM_Base_SetConfig+0x38>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e76:	d00b      	beq.n	8002e90 <TIM_Base_SetConfig+0x38>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a31      	ldr	r2, [pc, #196]	; (8002f40 <TIM_Base_SetConfig+0xe8>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d007      	beq.n	8002e90 <TIM_Base_SetConfig+0x38>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a30      	ldr	r2, [pc, #192]	; (8002f44 <TIM_Base_SetConfig+0xec>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d003      	beq.n	8002e90 <TIM_Base_SetConfig+0x38>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a2f      	ldr	r2, [pc, #188]	; (8002f48 <TIM_Base_SetConfig+0xf0>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d108      	bne.n	8002ea2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a25      	ldr	r2, [pc, #148]	; (8002f3c <TIM_Base_SetConfig+0xe4>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d01b      	beq.n	8002ee2 <TIM_Base_SetConfig+0x8a>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eb0:	d017      	beq.n	8002ee2 <TIM_Base_SetConfig+0x8a>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a22      	ldr	r2, [pc, #136]	; (8002f40 <TIM_Base_SetConfig+0xe8>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d013      	beq.n	8002ee2 <TIM_Base_SetConfig+0x8a>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a21      	ldr	r2, [pc, #132]	; (8002f44 <TIM_Base_SetConfig+0xec>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d00f      	beq.n	8002ee2 <TIM_Base_SetConfig+0x8a>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a20      	ldr	r2, [pc, #128]	; (8002f48 <TIM_Base_SetConfig+0xf0>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d00b      	beq.n	8002ee2 <TIM_Base_SetConfig+0x8a>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a1f      	ldr	r2, [pc, #124]	; (8002f4c <TIM_Base_SetConfig+0xf4>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d007      	beq.n	8002ee2 <TIM_Base_SetConfig+0x8a>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a1e      	ldr	r2, [pc, #120]	; (8002f50 <TIM_Base_SetConfig+0xf8>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d003      	beq.n	8002ee2 <TIM_Base_SetConfig+0x8a>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a1d      	ldr	r2, [pc, #116]	; (8002f54 <TIM_Base_SetConfig+0xfc>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d108      	bne.n	8002ef4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ee8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	68fa      	ldr	r2, [r7, #12]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	689a      	ldr	r2, [r3, #8]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4a08      	ldr	r2, [pc, #32]	; (8002f3c <TIM_Base_SetConfig+0xe4>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d103      	bne.n	8002f28 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	691a      	ldr	r2, [r3, #16]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	615a      	str	r2, [r3, #20]
}
 8002f2e:	bf00      	nop
 8002f30:	3714      	adds	r7, #20
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	40010000 	.word	0x40010000
 8002f40:	40000400 	.word	0x40000400
 8002f44:	40000800 	.word	0x40000800
 8002f48:	40000c00 	.word	0x40000c00
 8002f4c:	40014000 	.word	0x40014000
 8002f50:	40014400 	.word	0x40014400
 8002f54:	40014800 	.word	0x40014800

08002f58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e03f      	b.n	8003012 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d106      	bne.n	8002fac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f7fe f9b6 	bl	8001318 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2224      	movs	r2, #36	; 0x24
 8002fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68da      	ldr	r2, [r3, #12]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 f929 	bl	800321c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	691a      	ldr	r2, [r3, #16]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	695a      	ldr	r2, [r3, #20]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fe8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68da      	ldr	r2, [r3, #12]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ff8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2220      	movs	r2, #32
 8003004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2220      	movs	r2, #32
 800300c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b08a      	sub	sp, #40	; 0x28
 800301e:	af02      	add	r7, sp, #8
 8003020:	60f8      	str	r0, [r7, #12]
 8003022:	60b9      	str	r1, [r7, #8]
 8003024:	603b      	str	r3, [r7, #0]
 8003026:	4613      	mov	r3, r2
 8003028:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800302a:	2300      	movs	r3, #0
 800302c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b20      	cmp	r3, #32
 8003038:	d17c      	bne.n	8003134 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d002      	beq.n	8003046 <HAL_UART_Transmit+0x2c>
 8003040:	88fb      	ldrh	r3, [r7, #6]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e075      	b.n	8003136 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003050:	2b01      	cmp	r3, #1
 8003052:	d101      	bne.n	8003058 <HAL_UART_Transmit+0x3e>
 8003054:	2302      	movs	r3, #2
 8003056:	e06e      	b.n	8003136 <HAL_UART_Transmit+0x11c>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2221      	movs	r2, #33	; 0x21
 800306a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800306e:	f7fe faa7 	bl	80015c0 <HAL_GetTick>
 8003072:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	88fa      	ldrh	r2, [r7, #6]
 8003078:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	88fa      	ldrh	r2, [r7, #6]
 800307e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003088:	d108      	bne.n	800309c <HAL_UART_Transmit+0x82>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d104      	bne.n	800309c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003092:	2300      	movs	r3, #0
 8003094:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	61bb      	str	r3, [r7, #24]
 800309a:	e003      	b.n	80030a4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030a0:	2300      	movs	r3, #0
 80030a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80030ac:	e02a      	b.n	8003104 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	9300      	str	r3, [sp, #0]
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	2200      	movs	r2, #0
 80030b6:	2180      	movs	r1, #128	; 0x80
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f000 f840 	bl	800313e <UART_WaitOnFlagUntilTimeout>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e036      	b.n	8003136 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10b      	bne.n	80030e6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	881b      	ldrh	r3, [r3, #0]
 80030d2:	461a      	mov	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	3302      	adds	r3, #2
 80030e2:	61bb      	str	r3, [r7, #24]
 80030e4:	e007      	b.n	80030f6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	781a      	ldrb	r2, [r3, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	3301      	adds	r3, #1
 80030f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	3b01      	subs	r3, #1
 80030fe:	b29a      	uxth	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003108:	b29b      	uxth	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1cf      	bne.n	80030ae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	9300      	str	r3, [sp, #0]
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	2200      	movs	r2, #0
 8003116:	2140      	movs	r1, #64	; 0x40
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f000 f810 	bl	800313e <UART_WaitOnFlagUntilTimeout>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e006      	b.n	8003136 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2220      	movs	r2, #32
 800312c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003130:	2300      	movs	r3, #0
 8003132:	e000      	b.n	8003136 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003134:	2302      	movs	r3, #2
  }
}
 8003136:	4618      	mov	r0, r3
 8003138:	3720      	adds	r7, #32
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800313e:	b580      	push	{r7, lr}
 8003140:	b090      	sub	sp, #64	; 0x40
 8003142:	af00      	add	r7, sp, #0
 8003144:	60f8      	str	r0, [r7, #12]
 8003146:	60b9      	str	r1, [r7, #8]
 8003148:	603b      	str	r3, [r7, #0]
 800314a:	4613      	mov	r3, r2
 800314c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800314e:	e050      	b.n	80031f2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003150:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003156:	d04c      	beq.n	80031f2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003158:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800315a:	2b00      	cmp	r3, #0
 800315c:	d007      	beq.n	800316e <UART_WaitOnFlagUntilTimeout+0x30>
 800315e:	f7fe fa2f 	bl	80015c0 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800316a:	429a      	cmp	r2, r3
 800316c:	d241      	bcs.n	80031f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	330c      	adds	r3, #12
 8003174:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003178:	e853 3f00 	ldrex	r3, [r3]
 800317c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003180:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003184:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	330c      	adds	r3, #12
 800318c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800318e:	637a      	str	r2, [r7, #52]	; 0x34
 8003190:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003192:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003194:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003196:	e841 2300 	strex	r3, r2, [r1]
 800319a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800319c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1e5      	bne.n	800316e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	3314      	adds	r3, #20
 80031a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	e853 3f00 	ldrex	r3, [r3]
 80031b0:	613b      	str	r3, [r7, #16]
   return(result);
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	f023 0301 	bic.w	r3, r3, #1
 80031b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	3314      	adds	r3, #20
 80031c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031c2:	623a      	str	r2, [r7, #32]
 80031c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c6:	69f9      	ldr	r1, [r7, #28]
 80031c8:	6a3a      	ldr	r2, [r7, #32]
 80031ca:	e841 2300 	strex	r3, r2, [r1]
 80031ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1e5      	bne.n	80031a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2220      	movs	r2, #32
 80031da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2220      	movs	r2, #32
 80031e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e00f      	b.n	8003212 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	4013      	ands	r3, r2
 80031fc:	68ba      	ldr	r2, [r7, #8]
 80031fe:	429a      	cmp	r2, r3
 8003200:	bf0c      	ite	eq
 8003202:	2301      	moveq	r3, #1
 8003204:	2300      	movne	r3, #0
 8003206:	b2db      	uxtb	r3, r3
 8003208:	461a      	mov	r2, r3
 800320a:	79fb      	ldrb	r3, [r7, #7]
 800320c:	429a      	cmp	r2, r3
 800320e:	d09f      	beq.n	8003150 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3740      	adds	r7, #64	; 0x40
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
	...

0800321c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800321c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003220:	b0c0      	sub	sp, #256	; 0x100
 8003222:	af00      	add	r7, sp, #0
 8003224:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003238:	68d9      	ldr	r1, [r3, #12]
 800323a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	ea40 0301 	orr.w	r3, r0, r1
 8003244:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800324a:	689a      	ldr	r2, [r3, #8]
 800324c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	431a      	orrs	r2, r3
 8003254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	431a      	orrs	r2, r3
 800325c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003260:	69db      	ldr	r3, [r3, #28]
 8003262:	4313      	orrs	r3, r2
 8003264:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003274:	f021 010c 	bic.w	r1, r1, #12
 8003278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003282:	430b      	orrs	r3, r1
 8003284:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003296:	6999      	ldr	r1, [r3, #24]
 8003298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	ea40 0301 	orr.w	r3, r0, r1
 80032a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	4b8f      	ldr	r3, [pc, #572]	; (80034e8 <UART_SetConfig+0x2cc>)
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d005      	beq.n	80032bc <UART_SetConfig+0xa0>
 80032b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	4b8d      	ldr	r3, [pc, #564]	; (80034ec <UART_SetConfig+0x2d0>)
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d104      	bne.n	80032c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80032bc:	f7ff f916 	bl	80024ec <HAL_RCC_GetPCLK2Freq>
 80032c0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80032c4:	e003      	b.n	80032ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80032c6:	f7ff f8fd 	bl	80024c4 <HAL_RCC_GetPCLK1Freq>
 80032ca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032d2:	69db      	ldr	r3, [r3, #28]
 80032d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032d8:	f040 810c 	bne.w	80034f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032e0:	2200      	movs	r2, #0
 80032e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80032e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80032ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80032ee:	4622      	mov	r2, r4
 80032f0:	462b      	mov	r3, r5
 80032f2:	1891      	adds	r1, r2, r2
 80032f4:	65b9      	str	r1, [r7, #88]	; 0x58
 80032f6:	415b      	adcs	r3, r3
 80032f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80032fe:	4621      	mov	r1, r4
 8003300:	eb12 0801 	adds.w	r8, r2, r1
 8003304:	4629      	mov	r1, r5
 8003306:	eb43 0901 	adc.w	r9, r3, r1
 800330a:	f04f 0200 	mov.w	r2, #0
 800330e:	f04f 0300 	mov.w	r3, #0
 8003312:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003316:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800331a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800331e:	4690      	mov	r8, r2
 8003320:	4699      	mov	r9, r3
 8003322:	4623      	mov	r3, r4
 8003324:	eb18 0303 	adds.w	r3, r8, r3
 8003328:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800332c:	462b      	mov	r3, r5
 800332e:	eb49 0303 	adc.w	r3, r9, r3
 8003332:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003342:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003346:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800334a:	460b      	mov	r3, r1
 800334c:	18db      	adds	r3, r3, r3
 800334e:	653b      	str	r3, [r7, #80]	; 0x50
 8003350:	4613      	mov	r3, r2
 8003352:	eb42 0303 	adc.w	r3, r2, r3
 8003356:	657b      	str	r3, [r7, #84]	; 0x54
 8003358:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800335c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003360:	f7fc ff8e 	bl	8000280 <__aeabi_uldivmod>
 8003364:	4602      	mov	r2, r0
 8003366:	460b      	mov	r3, r1
 8003368:	4b61      	ldr	r3, [pc, #388]	; (80034f0 <UART_SetConfig+0x2d4>)
 800336a:	fba3 2302 	umull	r2, r3, r3, r2
 800336e:	095b      	lsrs	r3, r3, #5
 8003370:	011c      	lsls	r4, r3, #4
 8003372:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003376:	2200      	movs	r2, #0
 8003378:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800337c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003380:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003384:	4642      	mov	r2, r8
 8003386:	464b      	mov	r3, r9
 8003388:	1891      	adds	r1, r2, r2
 800338a:	64b9      	str	r1, [r7, #72]	; 0x48
 800338c:	415b      	adcs	r3, r3
 800338e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003390:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003394:	4641      	mov	r1, r8
 8003396:	eb12 0a01 	adds.w	sl, r2, r1
 800339a:	4649      	mov	r1, r9
 800339c:	eb43 0b01 	adc.w	fp, r3, r1
 80033a0:	f04f 0200 	mov.w	r2, #0
 80033a4:	f04f 0300 	mov.w	r3, #0
 80033a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80033ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80033b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033b4:	4692      	mov	sl, r2
 80033b6:	469b      	mov	fp, r3
 80033b8:	4643      	mov	r3, r8
 80033ba:	eb1a 0303 	adds.w	r3, sl, r3
 80033be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80033c2:	464b      	mov	r3, r9
 80033c4:	eb4b 0303 	adc.w	r3, fp, r3
 80033c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80033cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80033d8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80033dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80033e0:	460b      	mov	r3, r1
 80033e2:	18db      	adds	r3, r3, r3
 80033e4:	643b      	str	r3, [r7, #64]	; 0x40
 80033e6:	4613      	mov	r3, r2
 80033e8:	eb42 0303 	adc.w	r3, r2, r3
 80033ec:	647b      	str	r3, [r7, #68]	; 0x44
 80033ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80033f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80033f6:	f7fc ff43 	bl	8000280 <__aeabi_uldivmod>
 80033fa:	4602      	mov	r2, r0
 80033fc:	460b      	mov	r3, r1
 80033fe:	4611      	mov	r1, r2
 8003400:	4b3b      	ldr	r3, [pc, #236]	; (80034f0 <UART_SetConfig+0x2d4>)
 8003402:	fba3 2301 	umull	r2, r3, r3, r1
 8003406:	095b      	lsrs	r3, r3, #5
 8003408:	2264      	movs	r2, #100	; 0x64
 800340a:	fb02 f303 	mul.w	r3, r2, r3
 800340e:	1acb      	subs	r3, r1, r3
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003416:	4b36      	ldr	r3, [pc, #216]	; (80034f0 <UART_SetConfig+0x2d4>)
 8003418:	fba3 2302 	umull	r2, r3, r3, r2
 800341c:	095b      	lsrs	r3, r3, #5
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003424:	441c      	add	r4, r3
 8003426:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800342a:	2200      	movs	r2, #0
 800342c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003430:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003434:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003438:	4642      	mov	r2, r8
 800343a:	464b      	mov	r3, r9
 800343c:	1891      	adds	r1, r2, r2
 800343e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003440:	415b      	adcs	r3, r3
 8003442:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003444:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003448:	4641      	mov	r1, r8
 800344a:	1851      	adds	r1, r2, r1
 800344c:	6339      	str	r1, [r7, #48]	; 0x30
 800344e:	4649      	mov	r1, r9
 8003450:	414b      	adcs	r3, r1
 8003452:	637b      	str	r3, [r7, #52]	; 0x34
 8003454:	f04f 0200 	mov.w	r2, #0
 8003458:	f04f 0300 	mov.w	r3, #0
 800345c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003460:	4659      	mov	r1, fp
 8003462:	00cb      	lsls	r3, r1, #3
 8003464:	4651      	mov	r1, sl
 8003466:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800346a:	4651      	mov	r1, sl
 800346c:	00ca      	lsls	r2, r1, #3
 800346e:	4610      	mov	r0, r2
 8003470:	4619      	mov	r1, r3
 8003472:	4603      	mov	r3, r0
 8003474:	4642      	mov	r2, r8
 8003476:	189b      	adds	r3, r3, r2
 8003478:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800347c:	464b      	mov	r3, r9
 800347e:	460a      	mov	r2, r1
 8003480:	eb42 0303 	adc.w	r3, r2, r3
 8003484:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003494:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003498:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800349c:	460b      	mov	r3, r1
 800349e:	18db      	adds	r3, r3, r3
 80034a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80034a2:	4613      	mov	r3, r2
 80034a4:	eb42 0303 	adc.w	r3, r2, r3
 80034a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80034b2:	f7fc fee5 	bl	8000280 <__aeabi_uldivmod>
 80034b6:	4602      	mov	r2, r0
 80034b8:	460b      	mov	r3, r1
 80034ba:	4b0d      	ldr	r3, [pc, #52]	; (80034f0 <UART_SetConfig+0x2d4>)
 80034bc:	fba3 1302 	umull	r1, r3, r3, r2
 80034c0:	095b      	lsrs	r3, r3, #5
 80034c2:	2164      	movs	r1, #100	; 0x64
 80034c4:	fb01 f303 	mul.w	r3, r1, r3
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	3332      	adds	r3, #50	; 0x32
 80034ce:	4a08      	ldr	r2, [pc, #32]	; (80034f0 <UART_SetConfig+0x2d4>)
 80034d0:	fba2 2303 	umull	r2, r3, r2, r3
 80034d4:	095b      	lsrs	r3, r3, #5
 80034d6:	f003 0207 	and.w	r2, r3, #7
 80034da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4422      	add	r2, r4
 80034e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80034e4:	e105      	b.n	80036f2 <UART_SetConfig+0x4d6>
 80034e6:	bf00      	nop
 80034e8:	40011000 	.word	0x40011000
 80034ec:	40011400 	.word	0x40011400
 80034f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034f8:	2200      	movs	r2, #0
 80034fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80034fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003502:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003506:	4642      	mov	r2, r8
 8003508:	464b      	mov	r3, r9
 800350a:	1891      	adds	r1, r2, r2
 800350c:	6239      	str	r1, [r7, #32]
 800350e:	415b      	adcs	r3, r3
 8003510:	627b      	str	r3, [r7, #36]	; 0x24
 8003512:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003516:	4641      	mov	r1, r8
 8003518:	1854      	adds	r4, r2, r1
 800351a:	4649      	mov	r1, r9
 800351c:	eb43 0501 	adc.w	r5, r3, r1
 8003520:	f04f 0200 	mov.w	r2, #0
 8003524:	f04f 0300 	mov.w	r3, #0
 8003528:	00eb      	lsls	r3, r5, #3
 800352a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800352e:	00e2      	lsls	r2, r4, #3
 8003530:	4614      	mov	r4, r2
 8003532:	461d      	mov	r5, r3
 8003534:	4643      	mov	r3, r8
 8003536:	18e3      	adds	r3, r4, r3
 8003538:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800353c:	464b      	mov	r3, r9
 800353e:	eb45 0303 	adc.w	r3, r5, r3
 8003542:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003552:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003556:	f04f 0200 	mov.w	r2, #0
 800355a:	f04f 0300 	mov.w	r3, #0
 800355e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003562:	4629      	mov	r1, r5
 8003564:	008b      	lsls	r3, r1, #2
 8003566:	4621      	mov	r1, r4
 8003568:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800356c:	4621      	mov	r1, r4
 800356e:	008a      	lsls	r2, r1, #2
 8003570:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003574:	f7fc fe84 	bl	8000280 <__aeabi_uldivmod>
 8003578:	4602      	mov	r2, r0
 800357a:	460b      	mov	r3, r1
 800357c:	4b60      	ldr	r3, [pc, #384]	; (8003700 <UART_SetConfig+0x4e4>)
 800357e:	fba3 2302 	umull	r2, r3, r3, r2
 8003582:	095b      	lsrs	r3, r3, #5
 8003584:	011c      	lsls	r4, r3, #4
 8003586:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800358a:	2200      	movs	r2, #0
 800358c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003590:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003594:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003598:	4642      	mov	r2, r8
 800359a:	464b      	mov	r3, r9
 800359c:	1891      	adds	r1, r2, r2
 800359e:	61b9      	str	r1, [r7, #24]
 80035a0:	415b      	adcs	r3, r3
 80035a2:	61fb      	str	r3, [r7, #28]
 80035a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035a8:	4641      	mov	r1, r8
 80035aa:	1851      	adds	r1, r2, r1
 80035ac:	6139      	str	r1, [r7, #16]
 80035ae:	4649      	mov	r1, r9
 80035b0:	414b      	adcs	r3, r1
 80035b2:	617b      	str	r3, [r7, #20]
 80035b4:	f04f 0200 	mov.w	r2, #0
 80035b8:	f04f 0300 	mov.w	r3, #0
 80035bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035c0:	4659      	mov	r1, fp
 80035c2:	00cb      	lsls	r3, r1, #3
 80035c4:	4651      	mov	r1, sl
 80035c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035ca:	4651      	mov	r1, sl
 80035cc:	00ca      	lsls	r2, r1, #3
 80035ce:	4610      	mov	r0, r2
 80035d0:	4619      	mov	r1, r3
 80035d2:	4603      	mov	r3, r0
 80035d4:	4642      	mov	r2, r8
 80035d6:	189b      	adds	r3, r3, r2
 80035d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80035dc:	464b      	mov	r3, r9
 80035de:	460a      	mov	r2, r1
 80035e0:	eb42 0303 	adc.w	r3, r2, r3
 80035e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80035e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80035f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80035f4:	f04f 0200 	mov.w	r2, #0
 80035f8:	f04f 0300 	mov.w	r3, #0
 80035fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003600:	4649      	mov	r1, r9
 8003602:	008b      	lsls	r3, r1, #2
 8003604:	4641      	mov	r1, r8
 8003606:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800360a:	4641      	mov	r1, r8
 800360c:	008a      	lsls	r2, r1, #2
 800360e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003612:	f7fc fe35 	bl	8000280 <__aeabi_uldivmod>
 8003616:	4602      	mov	r2, r0
 8003618:	460b      	mov	r3, r1
 800361a:	4b39      	ldr	r3, [pc, #228]	; (8003700 <UART_SetConfig+0x4e4>)
 800361c:	fba3 1302 	umull	r1, r3, r3, r2
 8003620:	095b      	lsrs	r3, r3, #5
 8003622:	2164      	movs	r1, #100	; 0x64
 8003624:	fb01 f303 	mul.w	r3, r1, r3
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	011b      	lsls	r3, r3, #4
 800362c:	3332      	adds	r3, #50	; 0x32
 800362e:	4a34      	ldr	r2, [pc, #208]	; (8003700 <UART_SetConfig+0x4e4>)
 8003630:	fba2 2303 	umull	r2, r3, r2, r3
 8003634:	095b      	lsrs	r3, r3, #5
 8003636:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800363a:	441c      	add	r4, r3
 800363c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003640:	2200      	movs	r2, #0
 8003642:	673b      	str	r3, [r7, #112]	; 0x70
 8003644:	677a      	str	r2, [r7, #116]	; 0x74
 8003646:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800364a:	4642      	mov	r2, r8
 800364c:	464b      	mov	r3, r9
 800364e:	1891      	adds	r1, r2, r2
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	415b      	adcs	r3, r3
 8003654:	60fb      	str	r3, [r7, #12]
 8003656:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800365a:	4641      	mov	r1, r8
 800365c:	1851      	adds	r1, r2, r1
 800365e:	6039      	str	r1, [r7, #0]
 8003660:	4649      	mov	r1, r9
 8003662:	414b      	adcs	r3, r1
 8003664:	607b      	str	r3, [r7, #4]
 8003666:	f04f 0200 	mov.w	r2, #0
 800366a:	f04f 0300 	mov.w	r3, #0
 800366e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003672:	4659      	mov	r1, fp
 8003674:	00cb      	lsls	r3, r1, #3
 8003676:	4651      	mov	r1, sl
 8003678:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800367c:	4651      	mov	r1, sl
 800367e:	00ca      	lsls	r2, r1, #3
 8003680:	4610      	mov	r0, r2
 8003682:	4619      	mov	r1, r3
 8003684:	4603      	mov	r3, r0
 8003686:	4642      	mov	r2, r8
 8003688:	189b      	adds	r3, r3, r2
 800368a:	66bb      	str	r3, [r7, #104]	; 0x68
 800368c:	464b      	mov	r3, r9
 800368e:	460a      	mov	r2, r1
 8003690:	eb42 0303 	adc.w	r3, r2, r3
 8003694:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	663b      	str	r3, [r7, #96]	; 0x60
 80036a0:	667a      	str	r2, [r7, #100]	; 0x64
 80036a2:	f04f 0200 	mov.w	r2, #0
 80036a6:	f04f 0300 	mov.w	r3, #0
 80036aa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80036ae:	4649      	mov	r1, r9
 80036b0:	008b      	lsls	r3, r1, #2
 80036b2:	4641      	mov	r1, r8
 80036b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036b8:	4641      	mov	r1, r8
 80036ba:	008a      	lsls	r2, r1, #2
 80036bc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80036c0:	f7fc fdde 	bl	8000280 <__aeabi_uldivmod>
 80036c4:	4602      	mov	r2, r0
 80036c6:	460b      	mov	r3, r1
 80036c8:	4b0d      	ldr	r3, [pc, #52]	; (8003700 <UART_SetConfig+0x4e4>)
 80036ca:	fba3 1302 	umull	r1, r3, r3, r2
 80036ce:	095b      	lsrs	r3, r3, #5
 80036d0:	2164      	movs	r1, #100	; 0x64
 80036d2:	fb01 f303 	mul.w	r3, r1, r3
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	011b      	lsls	r3, r3, #4
 80036da:	3332      	adds	r3, #50	; 0x32
 80036dc:	4a08      	ldr	r2, [pc, #32]	; (8003700 <UART_SetConfig+0x4e4>)
 80036de:	fba2 2303 	umull	r2, r3, r2, r3
 80036e2:	095b      	lsrs	r3, r3, #5
 80036e4:	f003 020f 	and.w	r2, r3, #15
 80036e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4422      	add	r2, r4
 80036f0:	609a      	str	r2, [r3, #8]
}
 80036f2:	bf00      	nop
 80036f4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80036f8:	46bd      	mov	sp, r7
 80036fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036fe:	bf00      	nop
 8003700:	51eb851f 	.word	0x51eb851f

08003704 <__errno>:
 8003704:	4b01      	ldr	r3, [pc, #4]	; (800370c <__errno+0x8>)
 8003706:	6818      	ldr	r0, [r3, #0]
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	20000040 	.word	0x20000040

08003710 <__libc_init_array>:
 8003710:	b570      	push	{r4, r5, r6, lr}
 8003712:	4d0d      	ldr	r5, [pc, #52]	; (8003748 <__libc_init_array+0x38>)
 8003714:	4c0d      	ldr	r4, [pc, #52]	; (800374c <__libc_init_array+0x3c>)
 8003716:	1b64      	subs	r4, r4, r5
 8003718:	10a4      	asrs	r4, r4, #2
 800371a:	2600      	movs	r6, #0
 800371c:	42a6      	cmp	r6, r4
 800371e:	d109      	bne.n	8003734 <__libc_init_array+0x24>
 8003720:	4d0b      	ldr	r5, [pc, #44]	; (8003750 <__libc_init_array+0x40>)
 8003722:	4c0c      	ldr	r4, [pc, #48]	; (8003754 <__libc_init_array+0x44>)
 8003724:	f000 fc8e 	bl	8004044 <_init>
 8003728:	1b64      	subs	r4, r4, r5
 800372a:	10a4      	asrs	r4, r4, #2
 800372c:	2600      	movs	r6, #0
 800372e:	42a6      	cmp	r6, r4
 8003730:	d105      	bne.n	800373e <__libc_init_array+0x2e>
 8003732:	bd70      	pop	{r4, r5, r6, pc}
 8003734:	f855 3b04 	ldr.w	r3, [r5], #4
 8003738:	4798      	blx	r3
 800373a:	3601      	adds	r6, #1
 800373c:	e7ee      	b.n	800371c <__libc_init_array+0xc>
 800373e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003742:	4798      	blx	r3
 8003744:	3601      	adds	r6, #1
 8003746:	e7f2      	b.n	800372e <__libc_init_array+0x1e>
 8003748:	08004998 	.word	0x08004998
 800374c:	08004998 	.word	0x08004998
 8003750:	08004998 	.word	0x08004998
 8003754:	0800499c 	.word	0x0800499c

08003758 <memset>:
 8003758:	4402      	add	r2, r0
 800375a:	4603      	mov	r3, r0
 800375c:	4293      	cmp	r3, r2
 800375e:	d100      	bne.n	8003762 <memset+0xa>
 8003760:	4770      	bx	lr
 8003762:	f803 1b01 	strb.w	r1, [r3], #1
 8003766:	e7f9      	b.n	800375c <memset+0x4>

08003768 <_free_r>:
 8003768:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800376a:	2900      	cmp	r1, #0
 800376c:	d044      	beq.n	80037f8 <_free_r+0x90>
 800376e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003772:	9001      	str	r0, [sp, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	f1a1 0404 	sub.w	r4, r1, #4
 800377a:	bfb8      	it	lt
 800377c:	18e4      	addlt	r4, r4, r3
 800377e:	f000 f903 	bl	8003988 <__malloc_lock>
 8003782:	4a1e      	ldr	r2, [pc, #120]	; (80037fc <_free_r+0x94>)
 8003784:	9801      	ldr	r0, [sp, #4]
 8003786:	6813      	ldr	r3, [r2, #0]
 8003788:	b933      	cbnz	r3, 8003798 <_free_r+0x30>
 800378a:	6063      	str	r3, [r4, #4]
 800378c:	6014      	str	r4, [r2, #0]
 800378e:	b003      	add	sp, #12
 8003790:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003794:	f000 b8fe 	b.w	8003994 <__malloc_unlock>
 8003798:	42a3      	cmp	r3, r4
 800379a:	d908      	bls.n	80037ae <_free_r+0x46>
 800379c:	6825      	ldr	r5, [r4, #0]
 800379e:	1961      	adds	r1, r4, r5
 80037a0:	428b      	cmp	r3, r1
 80037a2:	bf01      	itttt	eq
 80037a4:	6819      	ldreq	r1, [r3, #0]
 80037a6:	685b      	ldreq	r3, [r3, #4]
 80037a8:	1949      	addeq	r1, r1, r5
 80037aa:	6021      	streq	r1, [r4, #0]
 80037ac:	e7ed      	b.n	800378a <_free_r+0x22>
 80037ae:	461a      	mov	r2, r3
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	b10b      	cbz	r3, 80037b8 <_free_r+0x50>
 80037b4:	42a3      	cmp	r3, r4
 80037b6:	d9fa      	bls.n	80037ae <_free_r+0x46>
 80037b8:	6811      	ldr	r1, [r2, #0]
 80037ba:	1855      	adds	r5, r2, r1
 80037bc:	42a5      	cmp	r5, r4
 80037be:	d10b      	bne.n	80037d8 <_free_r+0x70>
 80037c0:	6824      	ldr	r4, [r4, #0]
 80037c2:	4421      	add	r1, r4
 80037c4:	1854      	adds	r4, r2, r1
 80037c6:	42a3      	cmp	r3, r4
 80037c8:	6011      	str	r1, [r2, #0]
 80037ca:	d1e0      	bne.n	800378e <_free_r+0x26>
 80037cc:	681c      	ldr	r4, [r3, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	6053      	str	r3, [r2, #4]
 80037d2:	4421      	add	r1, r4
 80037d4:	6011      	str	r1, [r2, #0]
 80037d6:	e7da      	b.n	800378e <_free_r+0x26>
 80037d8:	d902      	bls.n	80037e0 <_free_r+0x78>
 80037da:	230c      	movs	r3, #12
 80037dc:	6003      	str	r3, [r0, #0]
 80037de:	e7d6      	b.n	800378e <_free_r+0x26>
 80037e0:	6825      	ldr	r5, [r4, #0]
 80037e2:	1961      	adds	r1, r4, r5
 80037e4:	428b      	cmp	r3, r1
 80037e6:	bf04      	itt	eq
 80037e8:	6819      	ldreq	r1, [r3, #0]
 80037ea:	685b      	ldreq	r3, [r3, #4]
 80037ec:	6063      	str	r3, [r4, #4]
 80037ee:	bf04      	itt	eq
 80037f0:	1949      	addeq	r1, r1, r5
 80037f2:	6021      	streq	r1, [r4, #0]
 80037f4:	6054      	str	r4, [r2, #4]
 80037f6:	e7ca      	b.n	800378e <_free_r+0x26>
 80037f8:	b003      	add	sp, #12
 80037fa:	bd30      	pop	{r4, r5, pc}
 80037fc:	200001bc 	.word	0x200001bc

08003800 <sbrk_aligned>:
 8003800:	b570      	push	{r4, r5, r6, lr}
 8003802:	4e0e      	ldr	r6, [pc, #56]	; (800383c <sbrk_aligned+0x3c>)
 8003804:	460c      	mov	r4, r1
 8003806:	6831      	ldr	r1, [r6, #0]
 8003808:	4605      	mov	r5, r0
 800380a:	b911      	cbnz	r1, 8003812 <sbrk_aligned+0x12>
 800380c:	f000 f88c 	bl	8003928 <_sbrk_r>
 8003810:	6030      	str	r0, [r6, #0]
 8003812:	4621      	mov	r1, r4
 8003814:	4628      	mov	r0, r5
 8003816:	f000 f887 	bl	8003928 <_sbrk_r>
 800381a:	1c43      	adds	r3, r0, #1
 800381c:	d00a      	beq.n	8003834 <sbrk_aligned+0x34>
 800381e:	1cc4      	adds	r4, r0, #3
 8003820:	f024 0403 	bic.w	r4, r4, #3
 8003824:	42a0      	cmp	r0, r4
 8003826:	d007      	beq.n	8003838 <sbrk_aligned+0x38>
 8003828:	1a21      	subs	r1, r4, r0
 800382a:	4628      	mov	r0, r5
 800382c:	f000 f87c 	bl	8003928 <_sbrk_r>
 8003830:	3001      	adds	r0, #1
 8003832:	d101      	bne.n	8003838 <sbrk_aligned+0x38>
 8003834:	f04f 34ff 	mov.w	r4, #4294967295
 8003838:	4620      	mov	r0, r4
 800383a:	bd70      	pop	{r4, r5, r6, pc}
 800383c:	200001c0 	.word	0x200001c0

08003840 <_malloc_r>:
 8003840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003844:	1ccd      	adds	r5, r1, #3
 8003846:	f025 0503 	bic.w	r5, r5, #3
 800384a:	3508      	adds	r5, #8
 800384c:	2d0c      	cmp	r5, #12
 800384e:	bf38      	it	cc
 8003850:	250c      	movcc	r5, #12
 8003852:	2d00      	cmp	r5, #0
 8003854:	4607      	mov	r7, r0
 8003856:	db01      	blt.n	800385c <_malloc_r+0x1c>
 8003858:	42a9      	cmp	r1, r5
 800385a:	d905      	bls.n	8003868 <_malloc_r+0x28>
 800385c:	230c      	movs	r3, #12
 800385e:	603b      	str	r3, [r7, #0]
 8003860:	2600      	movs	r6, #0
 8003862:	4630      	mov	r0, r6
 8003864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003868:	4e2e      	ldr	r6, [pc, #184]	; (8003924 <_malloc_r+0xe4>)
 800386a:	f000 f88d 	bl	8003988 <__malloc_lock>
 800386e:	6833      	ldr	r3, [r6, #0]
 8003870:	461c      	mov	r4, r3
 8003872:	bb34      	cbnz	r4, 80038c2 <_malloc_r+0x82>
 8003874:	4629      	mov	r1, r5
 8003876:	4638      	mov	r0, r7
 8003878:	f7ff ffc2 	bl	8003800 <sbrk_aligned>
 800387c:	1c43      	adds	r3, r0, #1
 800387e:	4604      	mov	r4, r0
 8003880:	d14d      	bne.n	800391e <_malloc_r+0xde>
 8003882:	6834      	ldr	r4, [r6, #0]
 8003884:	4626      	mov	r6, r4
 8003886:	2e00      	cmp	r6, #0
 8003888:	d140      	bne.n	800390c <_malloc_r+0xcc>
 800388a:	6823      	ldr	r3, [r4, #0]
 800388c:	4631      	mov	r1, r6
 800388e:	4638      	mov	r0, r7
 8003890:	eb04 0803 	add.w	r8, r4, r3
 8003894:	f000 f848 	bl	8003928 <_sbrk_r>
 8003898:	4580      	cmp	r8, r0
 800389a:	d13a      	bne.n	8003912 <_malloc_r+0xd2>
 800389c:	6821      	ldr	r1, [r4, #0]
 800389e:	3503      	adds	r5, #3
 80038a0:	1a6d      	subs	r5, r5, r1
 80038a2:	f025 0503 	bic.w	r5, r5, #3
 80038a6:	3508      	adds	r5, #8
 80038a8:	2d0c      	cmp	r5, #12
 80038aa:	bf38      	it	cc
 80038ac:	250c      	movcc	r5, #12
 80038ae:	4629      	mov	r1, r5
 80038b0:	4638      	mov	r0, r7
 80038b2:	f7ff ffa5 	bl	8003800 <sbrk_aligned>
 80038b6:	3001      	adds	r0, #1
 80038b8:	d02b      	beq.n	8003912 <_malloc_r+0xd2>
 80038ba:	6823      	ldr	r3, [r4, #0]
 80038bc:	442b      	add	r3, r5
 80038be:	6023      	str	r3, [r4, #0]
 80038c0:	e00e      	b.n	80038e0 <_malloc_r+0xa0>
 80038c2:	6822      	ldr	r2, [r4, #0]
 80038c4:	1b52      	subs	r2, r2, r5
 80038c6:	d41e      	bmi.n	8003906 <_malloc_r+0xc6>
 80038c8:	2a0b      	cmp	r2, #11
 80038ca:	d916      	bls.n	80038fa <_malloc_r+0xba>
 80038cc:	1961      	adds	r1, r4, r5
 80038ce:	42a3      	cmp	r3, r4
 80038d0:	6025      	str	r5, [r4, #0]
 80038d2:	bf18      	it	ne
 80038d4:	6059      	strne	r1, [r3, #4]
 80038d6:	6863      	ldr	r3, [r4, #4]
 80038d8:	bf08      	it	eq
 80038da:	6031      	streq	r1, [r6, #0]
 80038dc:	5162      	str	r2, [r4, r5]
 80038de:	604b      	str	r3, [r1, #4]
 80038e0:	4638      	mov	r0, r7
 80038e2:	f104 060b 	add.w	r6, r4, #11
 80038e6:	f000 f855 	bl	8003994 <__malloc_unlock>
 80038ea:	f026 0607 	bic.w	r6, r6, #7
 80038ee:	1d23      	adds	r3, r4, #4
 80038f0:	1af2      	subs	r2, r6, r3
 80038f2:	d0b6      	beq.n	8003862 <_malloc_r+0x22>
 80038f4:	1b9b      	subs	r3, r3, r6
 80038f6:	50a3      	str	r3, [r4, r2]
 80038f8:	e7b3      	b.n	8003862 <_malloc_r+0x22>
 80038fa:	6862      	ldr	r2, [r4, #4]
 80038fc:	42a3      	cmp	r3, r4
 80038fe:	bf0c      	ite	eq
 8003900:	6032      	streq	r2, [r6, #0]
 8003902:	605a      	strne	r2, [r3, #4]
 8003904:	e7ec      	b.n	80038e0 <_malloc_r+0xa0>
 8003906:	4623      	mov	r3, r4
 8003908:	6864      	ldr	r4, [r4, #4]
 800390a:	e7b2      	b.n	8003872 <_malloc_r+0x32>
 800390c:	4634      	mov	r4, r6
 800390e:	6876      	ldr	r6, [r6, #4]
 8003910:	e7b9      	b.n	8003886 <_malloc_r+0x46>
 8003912:	230c      	movs	r3, #12
 8003914:	603b      	str	r3, [r7, #0]
 8003916:	4638      	mov	r0, r7
 8003918:	f000 f83c 	bl	8003994 <__malloc_unlock>
 800391c:	e7a1      	b.n	8003862 <_malloc_r+0x22>
 800391e:	6025      	str	r5, [r4, #0]
 8003920:	e7de      	b.n	80038e0 <_malloc_r+0xa0>
 8003922:	bf00      	nop
 8003924:	200001bc 	.word	0x200001bc

08003928 <_sbrk_r>:
 8003928:	b538      	push	{r3, r4, r5, lr}
 800392a:	4d06      	ldr	r5, [pc, #24]	; (8003944 <_sbrk_r+0x1c>)
 800392c:	2300      	movs	r3, #0
 800392e:	4604      	mov	r4, r0
 8003930:	4608      	mov	r0, r1
 8003932:	602b      	str	r3, [r5, #0]
 8003934:	f7fd fd6c 	bl	8001410 <_sbrk>
 8003938:	1c43      	adds	r3, r0, #1
 800393a:	d102      	bne.n	8003942 <_sbrk_r+0x1a>
 800393c:	682b      	ldr	r3, [r5, #0]
 800393e:	b103      	cbz	r3, 8003942 <_sbrk_r+0x1a>
 8003940:	6023      	str	r3, [r4, #0]
 8003942:	bd38      	pop	{r3, r4, r5, pc}
 8003944:	200001c4 	.word	0x200001c4

08003948 <siprintf>:
 8003948:	b40e      	push	{r1, r2, r3}
 800394a:	b500      	push	{lr}
 800394c:	b09c      	sub	sp, #112	; 0x70
 800394e:	ab1d      	add	r3, sp, #116	; 0x74
 8003950:	9002      	str	r0, [sp, #8]
 8003952:	9006      	str	r0, [sp, #24]
 8003954:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003958:	4809      	ldr	r0, [pc, #36]	; (8003980 <siprintf+0x38>)
 800395a:	9107      	str	r1, [sp, #28]
 800395c:	9104      	str	r1, [sp, #16]
 800395e:	4909      	ldr	r1, [pc, #36]	; (8003984 <siprintf+0x3c>)
 8003960:	f853 2b04 	ldr.w	r2, [r3], #4
 8003964:	9105      	str	r1, [sp, #20]
 8003966:	6800      	ldr	r0, [r0, #0]
 8003968:	9301      	str	r3, [sp, #4]
 800396a:	a902      	add	r1, sp, #8
 800396c:	f000 f874 	bl	8003a58 <_svfiprintf_r>
 8003970:	9b02      	ldr	r3, [sp, #8]
 8003972:	2200      	movs	r2, #0
 8003974:	701a      	strb	r2, [r3, #0]
 8003976:	b01c      	add	sp, #112	; 0x70
 8003978:	f85d eb04 	ldr.w	lr, [sp], #4
 800397c:	b003      	add	sp, #12
 800397e:	4770      	bx	lr
 8003980:	20000040 	.word	0x20000040
 8003984:	ffff0208 	.word	0xffff0208

08003988 <__malloc_lock>:
 8003988:	4801      	ldr	r0, [pc, #4]	; (8003990 <__malloc_lock+0x8>)
 800398a:	f000 baf9 	b.w	8003f80 <__retarget_lock_acquire_recursive>
 800398e:	bf00      	nop
 8003990:	200001c8 	.word	0x200001c8

08003994 <__malloc_unlock>:
 8003994:	4801      	ldr	r0, [pc, #4]	; (800399c <__malloc_unlock+0x8>)
 8003996:	f000 baf4 	b.w	8003f82 <__retarget_lock_release_recursive>
 800399a:	bf00      	nop
 800399c:	200001c8 	.word	0x200001c8

080039a0 <__ssputs_r>:
 80039a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039a4:	688e      	ldr	r6, [r1, #8]
 80039a6:	429e      	cmp	r6, r3
 80039a8:	4682      	mov	sl, r0
 80039aa:	460c      	mov	r4, r1
 80039ac:	4690      	mov	r8, r2
 80039ae:	461f      	mov	r7, r3
 80039b0:	d838      	bhi.n	8003a24 <__ssputs_r+0x84>
 80039b2:	898a      	ldrh	r2, [r1, #12]
 80039b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80039b8:	d032      	beq.n	8003a20 <__ssputs_r+0x80>
 80039ba:	6825      	ldr	r5, [r4, #0]
 80039bc:	6909      	ldr	r1, [r1, #16]
 80039be:	eba5 0901 	sub.w	r9, r5, r1
 80039c2:	6965      	ldr	r5, [r4, #20]
 80039c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80039c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80039cc:	3301      	adds	r3, #1
 80039ce:	444b      	add	r3, r9
 80039d0:	106d      	asrs	r5, r5, #1
 80039d2:	429d      	cmp	r5, r3
 80039d4:	bf38      	it	cc
 80039d6:	461d      	movcc	r5, r3
 80039d8:	0553      	lsls	r3, r2, #21
 80039da:	d531      	bpl.n	8003a40 <__ssputs_r+0xa0>
 80039dc:	4629      	mov	r1, r5
 80039de:	f7ff ff2f 	bl	8003840 <_malloc_r>
 80039e2:	4606      	mov	r6, r0
 80039e4:	b950      	cbnz	r0, 80039fc <__ssputs_r+0x5c>
 80039e6:	230c      	movs	r3, #12
 80039e8:	f8ca 3000 	str.w	r3, [sl]
 80039ec:	89a3      	ldrh	r3, [r4, #12]
 80039ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039f2:	81a3      	strh	r3, [r4, #12]
 80039f4:	f04f 30ff 	mov.w	r0, #4294967295
 80039f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039fc:	6921      	ldr	r1, [r4, #16]
 80039fe:	464a      	mov	r2, r9
 8003a00:	f000 fac0 	bl	8003f84 <memcpy>
 8003a04:	89a3      	ldrh	r3, [r4, #12]
 8003a06:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003a0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a0e:	81a3      	strh	r3, [r4, #12]
 8003a10:	6126      	str	r6, [r4, #16]
 8003a12:	6165      	str	r5, [r4, #20]
 8003a14:	444e      	add	r6, r9
 8003a16:	eba5 0509 	sub.w	r5, r5, r9
 8003a1a:	6026      	str	r6, [r4, #0]
 8003a1c:	60a5      	str	r5, [r4, #8]
 8003a1e:	463e      	mov	r6, r7
 8003a20:	42be      	cmp	r6, r7
 8003a22:	d900      	bls.n	8003a26 <__ssputs_r+0x86>
 8003a24:	463e      	mov	r6, r7
 8003a26:	6820      	ldr	r0, [r4, #0]
 8003a28:	4632      	mov	r2, r6
 8003a2a:	4641      	mov	r1, r8
 8003a2c:	f000 fab8 	bl	8003fa0 <memmove>
 8003a30:	68a3      	ldr	r3, [r4, #8]
 8003a32:	1b9b      	subs	r3, r3, r6
 8003a34:	60a3      	str	r3, [r4, #8]
 8003a36:	6823      	ldr	r3, [r4, #0]
 8003a38:	4433      	add	r3, r6
 8003a3a:	6023      	str	r3, [r4, #0]
 8003a3c:	2000      	movs	r0, #0
 8003a3e:	e7db      	b.n	80039f8 <__ssputs_r+0x58>
 8003a40:	462a      	mov	r2, r5
 8003a42:	f000 fac7 	bl	8003fd4 <_realloc_r>
 8003a46:	4606      	mov	r6, r0
 8003a48:	2800      	cmp	r0, #0
 8003a4a:	d1e1      	bne.n	8003a10 <__ssputs_r+0x70>
 8003a4c:	6921      	ldr	r1, [r4, #16]
 8003a4e:	4650      	mov	r0, sl
 8003a50:	f7ff fe8a 	bl	8003768 <_free_r>
 8003a54:	e7c7      	b.n	80039e6 <__ssputs_r+0x46>
	...

08003a58 <_svfiprintf_r>:
 8003a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a5c:	4698      	mov	r8, r3
 8003a5e:	898b      	ldrh	r3, [r1, #12]
 8003a60:	061b      	lsls	r3, r3, #24
 8003a62:	b09d      	sub	sp, #116	; 0x74
 8003a64:	4607      	mov	r7, r0
 8003a66:	460d      	mov	r5, r1
 8003a68:	4614      	mov	r4, r2
 8003a6a:	d50e      	bpl.n	8003a8a <_svfiprintf_r+0x32>
 8003a6c:	690b      	ldr	r3, [r1, #16]
 8003a6e:	b963      	cbnz	r3, 8003a8a <_svfiprintf_r+0x32>
 8003a70:	2140      	movs	r1, #64	; 0x40
 8003a72:	f7ff fee5 	bl	8003840 <_malloc_r>
 8003a76:	6028      	str	r0, [r5, #0]
 8003a78:	6128      	str	r0, [r5, #16]
 8003a7a:	b920      	cbnz	r0, 8003a86 <_svfiprintf_r+0x2e>
 8003a7c:	230c      	movs	r3, #12
 8003a7e:	603b      	str	r3, [r7, #0]
 8003a80:	f04f 30ff 	mov.w	r0, #4294967295
 8003a84:	e0d1      	b.n	8003c2a <_svfiprintf_r+0x1d2>
 8003a86:	2340      	movs	r3, #64	; 0x40
 8003a88:	616b      	str	r3, [r5, #20]
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	9309      	str	r3, [sp, #36]	; 0x24
 8003a8e:	2320      	movs	r3, #32
 8003a90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a94:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a98:	2330      	movs	r3, #48	; 0x30
 8003a9a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003c44 <_svfiprintf_r+0x1ec>
 8003a9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003aa2:	f04f 0901 	mov.w	r9, #1
 8003aa6:	4623      	mov	r3, r4
 8003aa8:	469a      	mov	sl, r3
 8003aaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003aae:	b10a      	cbz	r2, 8003ab4 <_svfiprintf_r+0x5c>
 8003ab0:	2a25      	cmp	r2, #37	; 0x25
 8003ab2:	d1f9      	bne.n	8003aa8 <_svfiprintf_r+0x50>
 8003ab4:	ebba 0b04 	subs.w	fp, sl, r4
 8003ab8:	d00b      	beq.n	8003ad2 <_svfiprintf_r+0x7a>
 8003aba:	465b      	mov	r3, fp
 8003abc:	4622      	mov	r2, r4
 8003abe:	4629      	mov	r1, r5
 8003ac0:	4638      	mov	r0, r7
 8003ac2:	f7ff ff6d 	bl	80039a0 <__ssputs_r>
 8003ac6:	3001      	adds	r0, #1
 8003ac8:	f000 80aa 	beq.w	8003c20 <_svfiprintf_r+0x1c8>
 8003acc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ace:	445a      	add	r2, fp
 8003ad0:	9209      	str	r2, [sp, #36]	; 0x24
 8003ad2:	f89a 3000 	ldrb.w	r3, [sl]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f000 80a2 	beq.w	8003c20 <_svfiprintf_r+0x1c8>
 8003adc:	2300      	movs	r3, #0
 8003ade:	f04f 32ff 	mov.w	r2, #4294967295
 8003ae2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ae6:	f10a 0a01 	add.w	sl, sl, #1
 8003aea:	9304      	str	r3, [sp, #16]
 8003aec:	9307      	str	r3, [sp, #28]
 8003aee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003af2:	931a      	str	r3, [sp, #104]	; 0x68
 8003af4:	4654      	mov	r4, sl
 8003af6:	2205      	movs	r2, #5
 8003af8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003afc:	4851      	ldr	r0, [pc, #324]	; (8003c44 <_svfiprintf_r+0x1ec>)
 8003afe:	f7fc fb6f 	bl	80001e0 <memchr>
 8003b02:	9a04      	ldr	r2, [sp, #16]
 8003b04:	b9d8      	cbnz	r0, 8003b3e <_svfiprintf_r+0xe6>
 8003b06:	06d0      	lsls	r0, r2, #27
 8003b08:	bf44      	itt	mi
 8003b0a:	2320      	movmi	r3, #32
 8003b0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b10:	0711      	lsls	r1, r2, #28
 8003b12:	bf44      	itt	mi
 8003b14:	232b      	movmi	r3, #43	; 0x2b
 8003b16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b1a:	f89a 3000 	ldrb.w	r3, [sl]
 8003b1e:	2b2a      	cmp	r3, #42	; 0x2a
 8003b20:	d015      	beq.n	8003b4e <_svfiprintf_r+0xf6>
 8003b22:	9a07      	ldr	r2, [sp, #28]
 8003b24:	4654      	mov	r4, sl
 8003b26:	2000      	movs	r0, #0
 8003b28:	f04f 0c0a 	mov.w	ip, #10
 8003b2c:	4621      	mov	r1, r4
 8003b2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b32:	3b30      	subs	r3, #48	; 0x30
 8003b34:	2b09      	cmp	r3, #9
 8003b36:	d94e      	bls.n	8003bd6 <_svfiprintf_r+0x17e>
 8003b38:	b1b0      	cbz	r0, 8003b68 <_svfiprintf_r+0x110>
 8003b3a:	9207      	str	r2, [sp, #28]
 8003b3c:	e014      	b.n	8003b68 <_svfiprintf_r+0x110>
 8003b3e:	eba0 0308 	sub.w	r3, r0, r8
 8003b42:	fa09 f303 	lsl.w	r3, r9, r3
 8003b46:	4313      	orrs	r3, r2
 8003b48:	9304      	str	r3, [sp, #16]
 8003b4a:	46a2      	mov	sl, r4
 8003b4c:	e7d2      	b.n	8003af4 <_svfiprintf_r+0x9c>
 8003b4e:	9b03      	ldr	r3, [sp, #12]
 8003b50:	1d19      	adds	r1, r3, #4
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	9103      	str	r1, [sp, #12]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	bfbb      	ittet	lt
 8003b5a:	425b      	neglt	r3, r3
 8003b5c:	f042 0202 	orrlt.w	r2, r2, #2
 8003b60:	9307      	strge	r3, [sp, #28]
 8003b62:	9307      	strlt	r3, [sp, #28]
 8003b64:	bfb8      	it	lt
 8003b66:	9204      	strlt	r2, [sp, #16]
 8003b68:	7823      	ldrb	r3, [r4, #0]
 8003b6a:	2b2e      	cmp	r3, #46	; 0x2e
 8003b6c:	d10c      	bne.n	8003b88 <_svfiprintf_r+0x130>
 8003b6e:	7863      	ldrb	r3, [r4, #1]
 8003b70:	2b2a      	cmp	r3, #42	; 0x2a
 8003b72:	d135      	bne.n	8003be0 <_svfiprintf_r+0x188>
 8003b74:	9b03      	ldr	r3, [sp, #12]
 8003b76:	1d1a      	adds	r2, r3, #4
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	9203      	str	r2, [sp, #12]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	bfb8      	it	lt
 8003b80:	f04f 33ff 	movlt.w	r3, #4294967295
 8003b84:	3402      	adds	r4, #2
 8003b86:	9305      	str	r3, [sp, #20]
 8003b88:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003c54 <_svfiprintf_r+0x1fc>
 8003b8c:	7821      	ldrb	r1, [r4, #0]
 8003b8e:	2203      	movs	r2, #3
 8003b90:	4650      	mov	r0, sl
 8003b92:	f7fc fb25 	bl	80001e0 <memchr>
 8003b96:	b140      	cbz	r0, 8003baa <_svfiprintf_r+0x152>
 8003b98:	2340      	movs	r3, #64	; 0x40
 8003b9a:	eba0 000a 	sub.w	r0, r0, sl
 8003b9e:	fa03 f000 	lsl.w	r0, r3, r0
 8003ba2:	9b04      	ldr	r3, [sp, #16]
 8003ba4:	4303      	orrs	r3, r0
 8003ba6:	3401      	adds	r4, #1
 8003ba8:	9304      	str	r3, [sp, #16]
 8003baa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bae:	4826      	ldr	r0, [pc, #152]	; (8003c48 <_svfiprintf_r+0x1f0>)
 8003bb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003bb4:	2206      	movs	r2, #6
 8003bb6:	f7fc fb13 	bl	80001e0 <memchr>
 8003bba:	2800      	cmp	r0, #0
 8003bbc:	d038      	beq.n	8003c30 <_svfiprintf_r+0x1d8>
 8003bbe:	4b23      	ldr	r3, [pc, #140]	; (8003c4c <_svfiprintf_r+0x1f4>)
 8003bc0:	bb1b      	cbnz	r3, 8003c0a <_svfiprintf_r+0x1b2>
 8003bc2:	9b03      	ldr	r3, [sp, #12]
 8003bc4:	3307      	adds	r3, #7
 8003bc6:	f023 0307 	bic.w	r3, r3, #7
 8003bca:	3308      	adds	r3, #8
 8003bcc:	9303      	str	r3, [sp, #12]
 8003bce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bd0:	4433      	add	r3, r6
 8003bd2:	9309      	str	r3, [sp, #36]	; 0x24
 8003bd4:	e767      	b.n	8003aa6 <_svfiprintf_r+0x4e>
 8003bd6:	fb0c 3202 	mla	r2, ip, r2, r3
 8003bda:	460c      	mov	r4, r1
 8003bdc:	2001      	movs	r0, #1
 8003bde:	e7a5      	b.n	8003b2c <_svfiprintf_r+0xd4>
 8003be0:	2300      	movs	r3, #0
 8003be2:	3401      	adds	r4, #1
 8003be4:	9305      	str	r3, [sp, #20]
 8003be6:	4619      	mov	r1, r3
 8003be8:	f04f 0c0a 	mov.w	ip, #10
 8003bec:	4620      	mov	r0, r4
 8003bee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003bf2:	3a30      	subs	r2, #48	; 0x30
 8003bf4:	2a09      	cmp	r2, #9
 8003bf6:	d903      	bls.n	8003c00 <_svfiprintf_r+0x1a8>
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d0c5      	beq.n	8003b88 <_svfiprintf_r+0x130>
 8003bfc:	9105      	str	r1, [sp, #20]
 8003bfe:	e7c3      	b.n	8003b88 <_svfiprintf_r+0x130>
 8003c00:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c04:	4604      	mov	r4, r0
 8003c06:	2301      	movs	r3, #1
 8003c08:	e7f0      	b.n	8003bec <_svfiprintf_r+0x194>
 8003c0a:	ab03      	add	r3, sp, #12
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	462a      	mov	r2, r5
 8003c10:	4b0f      	ldr	r3, [pc, #60]	; (8003c50 <_svfiprintf_r+0x1f8>)
 8003c12:	a904      	add	r1, sp, #16
 8003c14:	4638      	mov	r0, r7
 8003c16:	f3af 8000 	nop.w
 8003c1a:	1c42      	adds	r2, r0, #1
 8003c1c:	4606      	mov	r6, r0
 8003c1e:	d1d6      	bne.n	8003bce <_svfiprintf_r+0x176>
 8003c20:	89ab      	ldrh	r3, [r5, #12]
 8003c22:	065b      	lsls	r3, r3, #25
 8003c24:	f53f af2c 	bmi.w	8003a80 <_svfiprintf_r+0x28>
 8003c28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c2a:	b01d      	add	sp, #116	; 0x74
 8003c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c30:	ab03      	add	r3, sp, #12
 8003c32:	9300      	str	r3, [sp, #0]
 8003c34:	462a      	mov	r2, r5
 8003c36:	4b06      	ldr	r3, [pc, #24]	; (8003c50 <_svfiprintf_r+0x1f8>)
 8003c38:	a904      	add	r1, sp, #16
 8003c3a:	4638      	mov	r0, r7
 8003c3c:	f000 f87a 	bl	8003d34 <_printf_i>
 8003c40:	e7eb      	b.n	8003c1a <_svfiprintf_r+0x1c2>
 8003c42:	bf00      	nop
 8003c44:	0800495c 	.word	0x0800495c
 8003c48:	08004966 	.word	0x08004966
 8003c4c:	00000000 	.word	0x00000000
 8003c50:	080039a1 	.word	0x080039a1
 8003c54:	08004962 	.word	0x08004962

08003c58 <_printf_common>:
 8003c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c5c:	4616      	mov	r6, r2
 8003c5e:	4699      	mov	r9, r3
 8003c60:	688a      	ldr	r2, [r1, #8]
 8003c62:	690b      	ldr	r3, [r1, #16]
 8003c64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	bfb8      	it	lt
 8003c6c:	4613      	movlt	r3, r2
 8003c6e:	6033      	str	r3, [r6, #0]
 8003c70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c74:	4607      	mov	r7, r0
 8003c76:	460c      	mov	r4, r1
 8003c78:	b10a      	cbz	r2, 8003c7e <_printf_common+0x26>
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	6033      	str	r3, [r6, #0]
 8003c7e:	6823      	ldr	r3, [r4, #0]
 8003c80:	0699      	lsls	r1, r3, #26
 8003c82:	bf42      	ittt	mi
 8003c84:	6833      	ldrmi	r3, [r6, #0]
 8003c86:	3302      	addmi	r3, #2
 8003c88:	6033      	strmi	r3, [r6, #0]
 8003c8a:	6825      	ldr	r5, [r4, #0]
 8003c8c:	f015 0506 	ands.w	r5, r5, #6
 8003c90:	d106      	bne.n	8003ca0 <_printf_common+0x48>
 8003c92:	f104 0a19 	add.w	sl, r4, #25
 8003c96:	68e3      	ldr	r3, [r4, #12]
 8003c98:	6832      	ldr	r2, [r6, #0]
 8003c9a:	1a9b      	subs	r3, r3, r2
 8003c9c:	42ab      	cmp	r3, r5
 8003c9e:	dc26      	bgt.n	8003cee <_printf_common+0x96>
 8003ca0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ca4:	1e13      	subs	r3, r2, #0
 8003ca6:	6822      	ldr	r2, [r4, #0]
 8003ca8:	bf18      	it	ne
 8003caa:	2301      	movne	r3, #1
 8003cac:	0692      	lsls	r2, r2, #26
 8003cae:	d42b      	bmi.n	8003d08 <_printf_common+0xb0>
 8003cb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003cb4:	4649      	mov	r1, r9
 8003cb6:	4638      	mov	r0, r7
 8003cb8:	47c0      	blx	r8
 8003cba:	3001      	adds	r0, #1
 8003cbc:	d01e      	beq.n	8003cfc <_printf_common+0xa4>
 8003cbe:	6823      	ldr	r3, [r4, #0]
 8003cc0:	68e5      	ldr	r5, [r4, #12]
 8003cc2:	6832      	ldr	r2, [r6, #0]
 8003cc4:	f003 0306 	and.w	r3, r3, #6
 8003cc8:	2b04      	cmp	r3, #4
 8003cca:	bf08      	it	eq
 8003ccc:	1aad      	subeq	r5, r5, r2
 8003cce:	68a3      	ldr	r3, [r4, #8]
 8003cd0:	6922      	ldr	r2, [r4, #16]
 8003cd2:	bf0c      	ite	eq
 8003cd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003cd8:	2500      	movne	r5, #0
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	bfc4      	itt	gt
 8003cde:	1a9b      	subgt	r3, r3, r2
 8003ce0:	18ed      	addgt	r5, r5, r3
 8003ce2:	2600      	movs	r6, #0
 8003ce4:	341a      	adds	r4, #26
 8003ce6:	42b5      	cmp	r5, r6
 8003ce8:	d11a      	bne.n	8003d20 <_printf_common+0xc8>
 8003cea:	2000      	movs	r0, #0
 8003cec:	e008      	b.n	8003d00 <_printf_common+0xa8>
 8003cee:	2301      	movs	r3, #1
 8003cf0:	4652      	mov	r2, sl
 8003cf2:	4649      	mov	r1, r9
 8003cf4:	4638      	mov	r0, r7
 8003cf6:	47c0      	blx	r8
 8003cf8:	3001      	adds	r0, #1
 8003cfa:	d103      	bne.n	8003d04 <_printf_common+0xac>
 8003cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8003d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d04:	3501      	adds	r5, #1
 8003d06:	e7c6      	b.n	8003c96 <_printf_common+0x3e>
 8003d08:	18e1      	adds	r1, r4, r3
 8003d0a:	1c5a      	adds	r2, r3, #1
 8003d0c:	2030      	movs	r0, #48	; 0x30
 8003d0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d12:	4422      	add	r2, r4
 8003d14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d1c:	3302      	adds	r3, #2
 8003d1e:	e7c7      	b.n	8003cb0 <_printf_common+0x58>
 8003d20:	2301      	movs	r3, #1
 8003d22:	4622      	mov	r2, r4
 8003d24:	4649      	mov	r1, r9
 8003d26:	4638      	mov	r0, r7
 8003d28:	47c0      	blx	r8
 8003d2a:	3001      	adds	r0, #1
 8003d2c:	d0e6      	beq.n	8003cfc <_printf_common+0xa4>
 8003d2e:	3601      	adds	r6, #1
 8003d30:	e7d9      	b.n	8003ce6 <_printf_common+0x8e>
	...

08003d34 <_printf_i>:
 8003d34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d38:	7e0f      	ldrb	r7, [r1, #24]
 8003d3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003d3c:	2f78      	cmp	r7, #120	; 0x78
 8003d3e:	4691      	mov	r9, r2
 8003d40:	4680      	mov	r8, r0
 8003d42:	460c      	mov	r4, r1
 8003d44:	469a      	mov	sl, r3
 8003d46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003d4a:	d807      	bhi.n	8003d5c <_printf_i+0x28>
 8003d4c:	2f62      	cmp	r7, #98	; 0x62
 8003d4e:	d80a      	bhi.n	8003d66 <_printf_i+0x32>
 8003d50:	2f00      	cmp	r7, #0
 8003d52:	f000 80d8 	beq.w	8003f06 <_printf_i+0x1d2>
 8003d56:	2f58      	cmp	r7, #88	; 0x58
 8003d58:	f000 80a3 	beq.w	8003ea2 <_printf_i+0x16e>
 8003d5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003d64:	e03a      	b.n	8003ddc <_printf_i+0xa8>
 8003d66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003d6a:	2b15      	cmp	r3, #21
 8003d6c:	d8f6      	bhi.n	8003d5c <_printf_i+0x28>
 8003d6e:	a101      	add	r1, pc, #4	; (adr r1, 8003d74 <_printf_i+0x40>)
 8003d70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d74:	08003dcd 	.word	0x08003dcd
 8003d78:	08003de1 	.word	0x08003de1
 8003d7c:	08003d5d 	.word	0x08003d5d
 8003d80:	08003d5d 	.word	0x08003d5d
 8003d84:	08003d5d 	.word	0x08003d5d
 8003d88:	08003d5d 	.word	0x08003d5d
 8003d8c:	08003de1 	.word	0x08003de1
 8003d90:	08003d5d 	.word	0x08003d5d
 8003d94:	08003d5d 	.word	0x08003d5d
 8003d98:	08003d5d 	.word	0x08003d5d
 8003d9c:	08003d5d 	.word	0x08003d5d
 8003da0:	08003eed 	.word	0x08003eed
 8003da4:	08003e11 	.word	0x08003e11
 8003da8:	08003ecf 	.word	0x08003ecf
 8003dac:	08003d5d 	.word	0x08003d5d
 8003db0:	08003d5d 	.word	0x08003d5d
 8003db4:	08003f0f 	.word	0x08003f0f
 8003db8:	08003d5d 	.word	0x08003d5d
 8003dbc:	08003e11 	.word	0x08003e11
 8003dc0:	08003d5d 	.word	0x08003d5d
 8003dc4:	08003d5d 	.word	0x08003d5d
 8003dc8:	08003ed7 	.word	0x08003ed7
 8003dcc:	682b      	ldr	r3, [r5, #0]
 8003dce:	1d1a      	adds	r2, r3, #4
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	602a      	str	r2, [r5, #0]
 8003dd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003dd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e0a3      	b.n	8003f28 <_printf_i+0x1f4>
 8003de0:	6820      	ldr	r0, [r4, #0]
 8003de2:	6829      	ldr	r1, [r5, #0]
 8003de4:	0606      	lsls	r6, r0, #24
 8003de6:	f101 0304 	add.w	r3, r1, #4
 8003dea:	d50a      	bpl.n	8003e02 <_printf_i+0xce>
 8003dec:	680e      	ldr	r6, [r1, #0]
 8003dee:	602b      	str	r3, [r5, #0]
 8003df0:	2e00      	cmp	r6, #0
 8003df2:	da03      	bge.n	8003dfc <_printf_i+0xc8>
 8003df4:	232d      	movs	r3, #45	; 0x2d
 8003df6:	4276      	negs	r6, r6
 8003df8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dfc:	485e      	ldr	r0, [pc, #376]	; (8003f78 <_printf_i+0x244>)
 8003dfe:	230a      	movs	r3, #10
 8003e00:	e019      	b.n	8003e36 <_printf_i+0x102>
 8003e02:	680e      	ldr	r6, [r1, #0]
 8003e04:	602b      	str	r3, [r5, #0]
 8003e06:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003e0a:	bf18      	it	ne
 8003e0c:	b236      	sxthne	r6, r6
 8003e0e:	e7ef      	b.n	8003df0 <_printf_i+0xbc>
 8003e10:	682b      	ldr	r3, [r5, #0]
 8003e12:	6820      	ldr	r0, [r4, #0]
 8003e14:	1d19      	adds	r1, r3, #4
 8003e16:	6029      	str	r1, [r5, #0]
 8003e18:	0601      	lsls	r1, r0, #24
 8003e1a:	d501      	bpl.n	8003e20 <_printf_i+0xec>
 8003e1c:	681e      	ldr	r6, [r3, #0]
 8003e1e:	e002      	b.n	8003e26 <_printf_i+0xf2>
 8003e20:	0646      	lsls	r6, r0, #25
 8003e22:	d5fb      	bpl.n	8003e1c <_printf_i+0xe8>
 8003e24:	881e      	ldrh	r6, [r3, #0]
 8003e26:	4854      	ldr	r0, [pc, #336]	; (8003f78 <_printf_i+0x244>)
 8003e28:	2f6f      	cmp	r7, #111	; 0x6f
 8003e2a:	bf0c      	ite	eq
 8003e2c:	2308      	moveq	r3, #8
 8003e2e:	230a      	movne	r3, #10
 8003e30:	2100      	movs	r1, #0
 8003e32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e36:	6865      	ldr	r5, [r4, #4]
 8003e38:	60a5      	str	r5, [r4, #8]
 8003e3a:	2d00      	cmp	r5, #0
 8003e3c:	bfa2      	ittt	ge
 8003e3e:	6821      	ldrge	r1, [r4, #0]
 8003e40:	f021 0104 	bicge.w	r1, r1, #4
 8003e44:	6021      	strge	r1, [r4, #0]
 8003e46:	b90e      	cbnz	r6, 8003e4c <_printf_i+0x118>
 8003e48:	2d00      	cmp	r5, #0
 8003e4a:	d04d      	beq.n	8003ee8 <_printf_i+0x1b4>
 8003e4c:	4615      	mov	r5, r2
 8003e4e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003e52:	fb03 6711 	mls	r7, r3, r1, r6
 8003e56:	5dc7      	ldrb	r7, [r0, r7]
 8003e58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003e5c:	4637      	mov	r7, r6
 8003e5e:	42bb      	cmp	r3, r7
 8003e60:	460e      	mov	r6, r1
 8003e62:	d9f4      	bls.n	8003e4e <_printf_i+0x11a>
 8003e64:	2b08      	cmp	r3, #8
 8003e66:	d10b      	bne.n	8003e80 <_printf_i+0x14c>
 8003e68:	6823      	ldr	r3, [r4, #0]
 8003e6a:	07de      	lsls	r6, r3, #31
 8003e6c:	d508      	bpl.n	8003e80 <_printf_i+0x14c>
 8003e6e:	6923      	ldr	r3, [r4, #16]
 8003e70:	6861      	ldr	r1, [r4, #4]
 8003e72:	4299      	cmp	r1, r3
 8003e74:	bfde      	ittt	le
 8003e76:	2330      	movle	r3, #48	; 0x30
 8003e78:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e7c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003e80:	1b52      	subs	r2, r2, r5
 8003e82:	6122      	str	r2, [r4, #16]
 8003e84:	f8cd a000 	str.w	sl, [sp]
 8003e88:	464b      	mov	r3, r9
 8003e8a:	aa03      	add	r2, sp, #12
 8003e8c:	4621      	mov	r1, r4
 8003e8e:	4640      	mov	r0, r8
 8003e90:	f7ff fee2 	bl	8003c58 <_printf_common>
 8003e94:	3001      	adds	r0, #1
 8003e96:	d14c      	bne.n	8003f32 <_printf_i+0x1fe>
 8003e98:	f04f 30ff 	mov.w	r0, #4294967295
 8003e9c:	b004      	add	sp, #16
 8003e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ea2:	4835      	ldr	r0, [pc, #212]	; (8003f78 <_printf_i+0x244>)
 8003ea4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003ea8:	6829      	ldr	r1, [r5, #0]
 8003eaa:	6823      	ldr	r3, [r4, #0]
 8003eac:	f851 6b04 	ldr.w	r6, [r1], #4
 8003eb0:	6029      	str	r1, [r5, #0]
 8003eb2:	061d      	lsls	r5, r3, #24
 8003eb4:	d514      	bpl.n	8003ee0 <_printf_i+0x1ac>
 8003eb6:	07df      	lsls	r7, r3, #31
 8003eb8:	bf44      	itt	mi
 8003eba:	f043 0320 	orrmi.w	r3, r3, #32
 8003ebe:	6023      	strmi	r3, [r4, #0]
 8003ec0:	b91e      	cbnz	r6, 8003eca <_printf_i+0x196>
 8003ec2:	6823      	ldr	r3, [r4, #0]
 8003ec4:	f023 0320 	bic.w	r3, r3, #32
 8003ec8:	6023      	str	r3, [r4, #0]
 8003eca:	2310      	movs	r3, #16
 8003ecc:	e7b0      	b.n	8003e30 <_printf_i+0xfc>
 8003ece:	6823      	ldr	r3, [r4, #0]
 8003ed0:	f043 0320 	orr.w	r3, r3, #32
 8003ed4:	6023      	str	r3, [r4, #0]
 8003ed6:	2378      	movs	r3, #120	; 0x78
 8003ed8:	4828      	ldr	r0, [pc, #160]	; (8003f7c <_printf_i+0x248>)
 8003eda:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003ede:	e7e3      	b.n	8003ea8 <_printf_i+0x174>
 8003ee0:	0659      	lsls	r1, r3, #25
 8003ee2:	bf48      	it	mi
 8003ee4:	b2b6      	uxthmi	r6, r6
 8003ee6:	e7e6      	b.n	8003eb6 <_printf_i+0x182>
 8003ee8:	4615      	mov	r5, r2
 8003eea:	e7bb      	b.n	8003e64 <_printf_i+0x130>
 8003eec:	682b      	ldr	r3, [r5, #0]
 8003eee:	6826      	ldr	r6, [r4, #0]
 8003ef0:	6961      	ldr	r1, [r4, #20]
 8003ef2:	1d18      	adds	r0, r3, #4
 8003ef4:	6028      	str	r0, [r5, #0]
 8003ef6:	0635      	lsls	r5, r6, #24
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	d501      	bpl.n	8003f00 <_printf_i+0x1cc>
 8003efc:	6019      	str	r1, [r3, #0]
 8003efe:	e002      	b.n	8003f06 <_printf_i+0x1d2>
 8003f00:	0670      	lsls	r0, r6, #25
 8003f02:	d5fb      	bpl.n	8003efc <_printf_i+0x1c8>
 8003f04:	8019      	strh	r1, [r3, #0]
 8003f06:	2300      	movs	r3, #0
 8003f08:	6123      	str	r3, [r4, #16]
 8003f0a:	4615      	mov	r5, r2
 8003f0c:	e7ba      	b.n	8003e84 <_printf_i+0x150>
 8003f0e:	682b      	ldr	r3, [r5, #0]
 8003f10:	1d1a      	adds	r2, r3, #4
 8003f12:	602a      	str	r2, [r5, #0]
 8003f14:	681d      	ldr	r5, [r3, #0]
 8003f16:	6862      	ldr	r2, [r4, #4]
 8003f18:	2100      	movs	r1, #0
 8003f1a:	4628      	mov	r0, r5
 8003f1c:	f7fc f960 	bl	80001e0 <memchr>
 8003f20:	b108      	cbz	r0, 8003f26 <_printf_i+0x1f2>
 8003f22:	1b40      	subs	r0, r0, r5
 8003f24:	6060      	str	r0, [r4, #4]
 8003f26:	6863      	ldr	r3, [r4, #4]
 8003f28:	6123      	str	r3, [r4, #16]
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f30:	e7a8      	b.n	8003e84 <_printf_i+0x150>
 8003f32:	6923      	ldr	r3, [r4, #16]
 8003f34:	462a      	mov	r2, r5
 8003f36:	4649      	mov	r1, r9
 8003f38:	4640      	mov	r0, r8
 8003f3a:	47d0      	blx	sl
 8003f3c:	3001      	adds	r0, #1
 8003f3e:	d0ab      	beq.n	8003e98 <_printf_i+0x164>
 8003f40:	6823      	ldr	r3, [r4, #0]
 8003f42:	079b      	lsls	r3, r3, #30
 8003f44:	d413      	bmi.n	8003f6e <_printf_i+0x23a>
 8003f46:	68e0      	ldr	r0, [r4, #12]
 8003f48:	9b03      	ldr	r3, [sp, #12]
 8003f4a:	4298      	cmp	r0, r3
 8003f4c:	bfb8      	it	lt
 8003f4e:	4618      	movlt	r0, r3
 8003f50:	e7a4      	b.n	8003e9c <_printf_i+0x168>
 8003f52:	2301      	movs	r3, #1
 8003f54:	4632      	mov	r2, r6
 8003f56:	4649      	mov	r1, r9
 8003f58:	4640      	mov	r0, r8
 8003f5a:	47d0      	blx	sl
 8003f5c:	3001      	adds	r0, #1
 8003f5e:	d09b      	beq.n	8003e98 <_printf_i+0x164>
 8003f60:	3501      	adds	r5, #1
 8003f62:	68e3      	ldr	r3, [r4, #12]
 8003f64:	9903      	ldr	r1, [sp, #12]
 8003f66:	1a5b      	subs	r3, r3, r1
 8003f68:	42ab      	cmp	r3, r5
 8003f6a:	dcf2      	bgt.n	8003f52 <_printf_i+0x21e>
 8003f6c:	e7eb      	b.n	8003f46 <_printf_i+0x212>
 8003f6e:	2500      	movs	r5, #0
 8003f70:	f104 0619 	add.w	r6, r4, #25
 8003f74:	e7f5      	b.n	8003f62 <_printf_i+0x22e>
 8003f76:	bf00      	nop
 8003f78:	0800496d 	.word	0x0800496d
 8003f7c:	0800497e 	.word	0x0800497e

08003f80 <__retarget_lock_acquire_recursive>:
 8003f80:	4770      	bx	lr

08003f82 <__retarget_lock_release_recursive>:
 8003f82:	4770      	bx	lr

08003f84 <memcpy>:
 8003f84:	440a      	add	r2, r1
 8003f86:	4291      	cmp	r1, r2
 8003f88:	f100 33ff 	add.w	r3, r0, #4294967295
 8003f8c:	d100      	bne.n	8003f90 <memcpy+0xc>
 8003f8e:	4770      	bx	lr
 8003f90:	b510      	push	{r4, lr}
 8003f92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f9a:	4291      	cmp	r1, r2
 8003f9c:	d1f9      	bne.n	8003f92 <memcpy+0xe>
 8003f9e:	bd10      	pop	{r4, pc}

08003fa0 <memmove>:
 8003fa0:	4288      	cmp	r0, r1
 8003fa2:	b510      	push	{r4, lr}
 8003fa4:	eb01 0402 	add.w	r4, r1, r2
 8003fa8:	d902      	bls.n	8003fb0 <memmove+0x10>
 8003faa:	4284      	cmp	r4, r0
 8003fac:	4623      	mov	r3, r4
 8003fae:	d807      	bhi.n	8003fc0 <memmove+0x20>
 8003fb0:	1e43      	subs	r3, r0, #1
 8003fb2:	42a1      	cmp	r1, r4
 8003fb4:	d008      	beq.n	8003fc8 <memmove+0x28>
 8003fb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003fba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003fbe:	e7f8      	b.n	8003fb2 <memmove+0x12>
 8003fc0:	4402      	add	r2, r0
 8003fc2:	4601      	mov	r1, r0
 8003fc4:	428a      	cmp	r2, r1
 8003fc6:	d100      	bne.n	8003fca <memmove+0x2a>
 8003fc8:	bd10      	pop	{r4, pc}
 8003fca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003fce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003fd2:	e7f7      	b.n	8003fc4 <memmove+0x24>

08003fd4 <_realloc_r>:
 8003fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fd8:	4680      	mov	r8, r0
 8003fda:	4614      	mov	r4, r2
 8003fdc:	460e      	mov	r6, r1
 8003fde:	b921      	cbnz	r1, 8003fea <_realloc_r+0x16>
 8003fe0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fe4:	4611      	mov	r1, r2
 8003fe6:	f7ff bc2b 	b.w	8003840 <_malloc_r>
 8003fea:	b92a      	cbnz	r2, 8003ff8 <_realloc_r+0x24>
 8003fec:	f7ff fbbc 	bl	8003768 <_free_r>
 8003ff0:	4625      	mov	r5, r4
 8003ff2:	4628      	mov	r0, r5
 8003ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ff8:	f000 f81b 	bl	8004032 <_malloc_usable_size_r>
 8003ffc:	4284      	cmp	r4, r0
 8003ffe:	4607      	mov	r7, r0
 8004000:	d802      	bhi.n	8004008 <_realloc_r+0x34>
 8004002:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004006:	d812      	bhi.n	800402e <_realloc_r+0x5a>
 8004008:	4621      	mov	r1, r4
 800400a:	4640      	mov	r0, r8
 800400c:	f7ff fc18 	bl	8003840 <_malloc_r>
 8004010:	4605      	mov	r5, r0
 8004012:	2800      	cmp	r0, #0
 8004014:	d0ed      	beq.n	8003ff2 <_realloc_r+0x1e>
 8004016:	42bc      	cmp	r4, r7
 8004018:	4622      	mov	r2, r4
 800401a:	4631      	mov	r1, r6
 800401c:	bf28      	it	cs
 800401e:	463a      	movcs	r2, r7
 8004020:	f7ff ffb0 	bl	8003f84 <memcpy>
 8004024:	4631      	mov	r1, r6
 8004026:	4640      	mov	r0, r8
 8004028:	f7ff fb9e 	bl	8003768 <_free_r>
 800402c:	e7e1      	b.n	8003ff2 <_realloc_r+0x1e>
 800402e:	4635      	mov	r5, r6
 8004030:	e7df      	b.n	8003ff2 <_realloc_r+0x1e>

08004032 <_malloc_usable_size_r>:
 8004032:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004036:	1f18      	subs	r0, r3, #4
 8004038:	2b00      	cmp	r3, #0
 800403a:	bfbc      	itt	lt
 800403c:	580b      	ldrlt	r3, [r1, r0]
 800403e:	18c0      	addlt	r0, r0, r3
 8004040:	4770      	bx	lr
	...

08004044 <_init>:
 8004044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004046:	bf00      	nop
 8004048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800404a:	bc08      	pop	{r3}
 800404c:	469e      	mov	lr, r3
 800404e:	4770      	bx	lr

08004050 <_fini>:
 8004050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004052:	bf00      	nop
 8004054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004056:	bc08      	pop	{r3}
 8004058:	469e      	mov	lr, r3
 800405a:	4770      	bx	lr
